use std::hash::{Hasher, Hashable};
use std::cmp::{Equatable, Comparable};
use std::collections::{HashMap, Vector};
use std::fmt::format;

#[export]
fn main() {
    let hm = HashMap::new::<&[u8], u64, std::hash::xxhash::Xxh64>();
    defer hm.free();

    for i in std::iter::range(0u64, 0x100) {
        let string = format!("hello, {}", i);
        defer string.free();
        hm.insert((string.as_slice(), i));
    }

    for elem in hm {
        println!("{} => {}", elem.0, elem.1);
    }

    let slice: &[u8] = &[1,2,3,4,5];

    for i in slice {
        println!("yay, {}", i);
    }

    let vec = std::collections::Vector::from_slice(slice);
    defer vec.free();

    for i in vec {
        println!("yay, {}", i);
    }
}
