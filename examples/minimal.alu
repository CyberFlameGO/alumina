use std::hash::{Hasher, Hashable};
use std::cmp::{Equatable, Comparable};
use std::collections::{HashMap, Vector};
use std::fmt::format;
use std::hash::xxhash::Xxh64;
use std::iter::for_each;
use std::random::DEFAULT_RNG;

fn hash_of<T: Hashable<T, Xxh64>>(value: T) -> u64 {
    let hasher = Xxh64::new();
    value.hash(&hasher);
    hasher.finish()
}

struct foo {}

#[export]
fn main() {
    // These should all return the same value.
    println!("{}", hash_of(());
    println!("{}", hash_of((1, 2, 3, 4, ())));
    println!("{}", hash_of(((1, 2), (3, 4))));
    
    //
    let a = (1,2,3,4);
    let b = (1,2,3,4);
    println!("{}", a.less_than(&b));
}
