struct vector<T> {
    data: &mut [T],
    length: usize,
}

impl vector {
    use std::mem::{slice, alloc, copy_to, free};

    fn new<T>() -> vector<T> {
        with_capacity(0)
    }

    fn with_capacity<T>(capacity: usize) -> vector<T> {
        vector {
            data: alloc::<T>(capacity),
            length: 0,
        }
    }

    fn reserve<T>(self: &mut vector<T>, new_capacity: usize) {
        if self.data.len < new_capacity {
            self.data = {
                let new_data = alloc::<T>(new_capacity);
                self.data.copy_to(new_data.ptr);
                self.data.free();
                new_data
            };
        }
    }

    fn push<T>(self: &mut vector<T>, value: T) {
        use std::math::max;

        if self.length == self.data.len {
            self.reserve(max(self.data.len, 1) * 2);
        }

        self.data[self.length] = value;
        self.length += 1;
    }

    fn pop<T>(self: &mut vector<T>) -> T {
        let value = self.data[self.length - 1];
        self.length -= 1;
        value
    }

    fn destroy<T>(self: &mut vector<T>) {
        self.data.free();
    }
}


#[export]
fn main() {
    let v: vector<u8> = vector::new();
    v.push(1);
    v.destroy();
}
