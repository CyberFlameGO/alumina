struct Stack<T> {
    data: &mut [T],
    length: usize,
}

impl Stack {
    use std::mem::{slice, alloc, copy_to};

    fn new<T>() -> Stack<T> {
        with_capacity(0)
    }

    fn with_capacity<T>(capacity: usize) -> Stack<T> {
        Stack {
            data: alloc::<T>(capacity),
            length: 0,
        }
    }

    fn reserve<T>(self: &mut Stack<T>, new_capacity: usize) {
        if self.data.len < new_capacity {
            self.data = {
                let new_data = alloc::<T>(new_capacity);
                self.data.copy_to(new_data.ptr);
                self.free();
                new_data
            };
        }
    }

    fn push<T>(self: &mut Stack<T>, value: T) {
        use std::math::max;

        if self.length == self.data.len {
            self.reserve(max(self.data.len, 1) * 2);
        }

        self.data[self.length] = value;
        self.length += 1;
    }

    fn pop<T>(self: &mut Stack<T>) -> T {
        self.length -= 1;
        self.data[self.length]
    }

    fn empty<T>(self: &Stack<T>) -> bool {
        self.length == 0
    }

    fn free<T>(self: &mut Stack<T>) {
        use std::mem::free;
        self.data.free();
    }
}

use std::io::print;

#[export]
fn main() {
    let v: Stack<&[u8]> = Stack::new();
    defer v.free();

    v.push("Stack.\n");
    v.push("a ");
    v.push("am ");
    v.push("I ");

    while !v.empty() {
        print!("{}", v.pop());
    }
}
