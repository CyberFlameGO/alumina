const index = [["::"," #! Alumina programming language","/index.html"],["libc"," \"FFI\" interfaces to libc.","/libc.html"],["libm"," FFI bindings to the standard C math library.","/libm.html"],["std"," Standard library for the Alumina language.","/std.html"],["test"," Unit testing mini-framework.","/test.html"],["libc::free","","/libc.html#item.free"],["libc::memcpy","","/libc.html#item.memcpy"],["libc::memset","","/libc.html#item.memset"],["libc::memmove","","/libc.html#item.memmove"],["libc::memcmp","","/libc.html#item.memcmp"],["libc::memchr","","/libc.html#item.memchr"],["libc::memmem","","/libc.html#item.memmem"],["libc::malloc","","/libc.html#item.malloc"],["libc::realloc","","/libc.html#item.realloc"],["libc::calloc","","/libc.html#item.calloc"],["libc::exit","","/libc.html#item.exit"],["libc::_exit","","/libc.html#item._exit"],["libc::strlen","","/libc.html#item.strlen"],["libc::getrandom","","/libc.html#item.getrandom"],["libc::write","","/libc.html#item.write"],["libc::read","","/libc.html#item.read"],["libc::open","","/libc.html#item.open"],["libc::lseek","","/libc.html#item.lseek"],["libc::lseek64","","/libc.html#item.lseek64"],["libc::close","","/libc.html#item.close"],["libc::fsync","","/libc.html#item.fsync"],["libc::execv","","/libc.html#item.execv"],["libc::execve","","/libc.html#item.execve"],["libc::execvp","","/libc.html#item.execvp"],["libc::execvpe","","/libc.html#item.execvpe"],["libc::kill","","/libc.html#item.kill"],["libc::sleep","","/libc.html#item.sleep"],["libc::nanosleep","","/libc.html#item.nanosleep"],["libc::fork","","/libc.html#item.fork"],["libc::pipe","","/libc.html#item.pipe"],["libc::pipe2","","/libc.html#item.pipe2"],["libc::poll","","/libc.html#item.poll"],["libc::dup2","","/libc.html#item.dup2"],["libc::waitpid","","/libc.html#item.waitpid"],["libc::clock_getres","","/libc.html#item.clock_getres"],["libc::clock_gettime","","/libc.html#item.clock_gettime"],["libc::signal","","/libc.html#item.signal"],["libc::ioctl","","/libc.html#item.ioctl"],["libc::ioctl","","/libc.html#item.ioctl.1"],["libc::ioctl","","/libc.html#item.ioctl.2"],["libc::fcntl","","/libc.html#item.fcntl"],["libc::__errno_location","","/libc.html#item.__errno_location"],["libc::__xpg_strerror_r","","/libc.html#item.__xpg_strerror_r"],["libc::__errno","","/libc.html#item.__errno"],["libc::strerror_r","","/libc.html#item.strerror_r"],["libc::__error","","/libc.html#item.__error"],["libc::strerror_r","","/libc.html#item.strerror_r.1"],["libc::socket","","/libc.html#item.socket"],["libc::connect","","/libc.html#item.connect"],["libc::listen","","/libc.html#item.listen"],["libc::accept","","/libc.html#item.accept"],["libc::accept4","","/libc.html#item.accept4"],["libc::setsockopt","","/libc.html#item.setsockopt"],["libc::recv","","/libc.html#item.recv"],["libc::send","","/libc.html#item.send"],["libc::recvfrom","","/libc.html#item.recvfrom"],["libc::sendto","","/libc.html#item.sendto"],["libc::getaddrinfo","","/libc.html#item.getaddrinfo"],["libc::freeaddrinfo","","/libc.html#item.freeaddrinfo"],["libc::gai_strerror","","/libc.html#item.gai_strerror"],["libc::getpeername","","/libc.html#item.getpeername"],["libc::getsockname","","/libc.html#item.getsockname"],["libc::bind","","/libc.html#item.bind"],["libc::shutdown","","/libc.html#item.shutdown"],["libc::opendir","","/libc.html#item.opendir"],["libc::opendir","","/libc.html#item.opendir.1"],["libc::readdir","","/libc.html#item.readdir"],["libc::readdir","","/libc.html#item.readdir.1"],["libc::closedir","","/libc.html#item.closedir"],["libc::readdir64","","/libc.html#item.readdir64"],["libc::mkdir","","/libc.html#item.mkdir"],["libc::stat","","/libc.html#item.stat"],["libc::stat","","/libc.html#item.stat.1"],["libc::stat64","","/libc.html#item.stat64"],["libc::fstat","","/libc.html#item.fstat"],["libc::fstat","","/libc.html#item.fstat.1"],["libc::fstat64","","/libc.html#item.fstat64"],["libc::rmdir","","/libc.html#item.rmdir"],["libc::unlink","","/libc.html#item.unlink"],["libc::timespec","","/libc/timespec.html"],["libc::in_addr","","/libc/in_addr.html"],["libc::in6_addr","","/libc/in6_addr.html"],["libc::sockaddr","","/libc/sockaddr.html"],["libc::sockaddr_storage","","/libc/sockaddr_storage.html"],["libc::sockaddr_in","","/libc/sockaddr_in.html"],["libc::sockaddr_in6","","/libc/sockaddr_in6.html"],["libc::addrinfo","","/libc/addrinfo.html"],["libc::sockaddr","","/libc/sockaddr.1.html"],["libc::sockaddr_storage","","/libc/sockaddr_storage.1.html"],["libc::sockaddr_in","","/libc/sockaddr_in.1.html"],["libc::sockaddr_in6","","/libc/sockaddr_in6.1.html"],["libc::addrinfo","","/libc/addrinfo.1.html"],["libc::dirent","","/libc/dirent.html"],["libc::dirent64","","/libc/dirent64.html"],["libc::dirent","","/libc/dirent.1.html"],["libc::dirent","","/libc/dirent.2.html"],["libc::dirent64","","/libc/dirent64.1.html"],["libc::DIR","","/libc/DIR.html"],["libc::pollfd","","/libc/pollfd.html"],["libc::t_stat","","/libc/t_stat.html"],["libc::t_stat64","","/libc/t_stat64.html"],["libc::t_stat","","/libc/t_stat.1.html"],["libc::t_stat64","","/libc/t_stat64.1.html"],["libc::t_stat","","/libc/t_stat.2.html"],["libc::t_stat64","","/libc/t_stat64.2.html"],["libc::t_stat","","/libc/t_stat.3.html"],["libc::c_schar","","/libc.html#item.c_schar"],["libc::c_uchar","","/libc.html#item.c_uchar"],["libc::c_short","","/libc.html#item.c_short"],["libc::c_ushort","","/libc.html#item.c_ushort"],["libc::c_int","","/libc.html#item.c_int"],["libc::c_uint","","/libc.html#item.c_uint"],["libc::c_float","","/libc.html#item.c_float"],["libc::c_double","","/libc.html#item.c_double"],["libc::c_longlong","","/libc.html#item.c_longlong"],["libc::c_ulonglong","","/libc.html#item.c_ulonglong"],["libc::intmax_t","","/libc.html#item.intmax_t"],["libc::uintmax_t","","/libc.html#item.uintmax_t"],["libc::size_t","","/libc.html#item.size_t"],["libc::ptrdiff_t","","/libc.html#item.ptrdiff_t"],["libc::intptr_t","","/libc.html#item.intptr_t"],["libc::uintptr_t","","/libc.html#item.uintptr_t"],["libc::ssize_t","","/libc.html#item.ssize_t"],["libc::pid_t","","/libc.html#item.pid_t"],["libc::uid_t","","/libc.html#item.uid_t"],["libc::gid_t","","/libc.html#item.gid_t"],["libc::in_addr_t","","/libc.html#item.in_addr_t"],["libc::in_port_t","","/libc.html#item.in_port_t"],["libc::sighandler_t","","/libc.html#item.sighandler_t"],["libc::clockid_t","","/libc.html#item.clockid_t"],["libc::ino64_t","","/libc.html#item.ino64_t"],["libc::off64_t","","/libc.html#item.off64_t"],["libc::blkcnt64_t","","/libc.html#item.blkcnt64_t"],["libc::c_char","","/libc.html#item.c_char"],["libc::wchar_t","","/libc.html#item.wchar_t"],["libc::clock_t","","/libc.html#item.clock_t"],["libc::time_t","","/libc.html#item.time_t"],["libc::mode_t","","/libc.html#item.mode_t"],["libc::c_long","","/libc.html#item.c_long"],["libc::c_ulong","","/libc.html#item.c_ulong"],["libc::clockid_t","","/libc.html#item.clockid_t.1"],["libc::off_t","","/libc.html#item.off_t"],["libc::nfds_t","","/libc.html#item.nfds_t"],["libc::socklen_t","","/libc.html#item.socklen_t"],["libc::sa_family_t","","/libc.html#item.sa_family_t"],["libc::dev_t","","/libc.html#item.dev_t"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t"],["libc::nlink_t","","/libc.html#item.nlink_t"],["libc::blksize_t","","/libc.html#item.blksize_t"],["libc::ino_t","","/libc.html#item.ino_t"],["libc::c_char","","/libc.html#item.c_char.1"],["libc::wchar_t","","/libc.html#item.wchar_t.1"],["libc::c_long","","/libc.html#item.c_long.1"],["libc::c_ulong","","/libc.html#item.c_ulong.1"],["libc::mode_t","","/libc.html#item.mode_t.1"],["libc::clock_t","","/libc.html#item.clock_t.1"],["libc::time_t","","/libc.html#item.time_t.1"],["libc::off_t","","/libc.html#item.off_t.1"],["libc::nfds_t","","/libc.html#item.nfds_t.1"],["libc::socklen_t","","/libc.html#item.socklen_t.1"],["libc::socklen_t","","/libc.html#item.socklen_t.2"],["libc::sa_family_t","","/libc.html#item.sa_family_t.1"],["libc::dev_t","","/libc.html#item.dev_t.1"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t.1"],["libc::blksize_t","","/libc.html#item.blksize_t.1"],["libc::nlink_t","","/libc.html#item.nlink_t.1"],["libc::ino_t","","/libc.html#item.ino_t.1"],["libc::off_t","","/libc.html#item.off_t.2"],["libc::ino_t","","/libc.html#item.ino_t.2"],["libc::off_t","","/libc.html#item.off_t.3"],["libc::ino_t","","/libc.html#item.ino_t.3"],["libc::c_long","","/libc.html#item.c_long.2"],["libc::c_ulong","","/libc.html#item.c_ulong.2"],["libc::c_char","","/libc.html#item.c_char.2"],["libc::wchar_t","","/libc.html#item.wchar_t.2"],["libc::clock_t","","/libc.html#item.clock_t.2"],["libc::time_t","","/libc.html#item.time_t.2"],["libc::nlink_t","","/libc.html#item.nlink_t.2"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t.2"],["libc::blksize_t","","/libc.html#item.blksize_t.2"],["libc::c_char","","/libc.html#item.c_char.3"],["libc::wchar_t","","/libc.html#item.wchar_t.3"],["libc::clock_t","","/libc.html#item.clock_t.3"],["libc::time_t","","/libc.html#item.time_t.3"],["libc::nlink_t","","/libc.html#item.nlink_t.3"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t.3"],["libc::blksize_t","","/libc.html#item.blksize_t.3"],["libc::c_long","","/libc.html#item.c_long.3"],["libc::c_ulong","","/libc.html#item.c_ulong.3"],["libc::c_long","","/libc.html#item.c_long.4"],["libc::c_ulong","","/libc.html#item.c_ulong.4"],["libc::c_char","","/libc.html#item.c_char.4"],["libc::wchar_t","","/libc.html#item.wchar_t.4"],["libc::c_long","","/libc.html#item.c_long.5"],["libc::c_ulong","","/libc.html#item.c_ulong.5"],["libc::clock_t","","/libc.html#item.clock_t.4"],["libc::time_t","","/libc.html#item.time_t.4"],["libc::nlink_t","","/libc.html#item.nlink_t.4"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t.4"],["libc::blksize_t","","/libc.html#item.blksize_t.4"],["libc::c_long","","/libc.html#item.c_long.6"],["libc::c_ulong","","/libc.html#item.c_ulong.6"],["libc::clock_t","","/libc.html#item.clock_t.5"],["libc::time_t","","/libc.html#item.time_t.5"],["libc::nlink_t","","/libc.html#item.nlink_t.5"],["libc::blkcnt_t","","/libc.html#item.blkcnt_t.5"],["libc::blksize_t","","/libc.html#item.blksize_t.5"],["libc::mode_t","","/libc.html#item.mode_t.2"],["libc::socklen_t","","/libc.html#item.socklen_t.3"],["libc::nfds_t","","/libc.html#item.nfds_t.2"],["libc::sa_family_t","","/libc.html#item.sa_family_t.2"],["libc::dev_t","","/libc.html#item.dev_t.2"],["libc::c_char","","/libc.html#item.c_char.5"],["libc::c_long","","/libc.html#item.c_long.7"],["libc::c_ulong","","/libc.html#item.c_ulong.7"],["libc::wchar_t","","/libc.html#item.wchar_t.5"],["libc::EXIT_FAILURE","","/libc.html#item.EXIT_FAILURE"],["libc::EXIT_SUCCESS","","/libc.html#item.EXIT_SUCCESS"],["libc::STDIN_FILENO","","/libc.html#item.STDIN_FILENO"],["libc::STDOUT_FILENO","","/libc.html#item.STDOUT_FILENO"],["libc::STDERR_FILENO","","/libc.html#item.STDERR_FILENO"],["libc::SIGHUP","","/libc.html#item.SIGHUP"],["libc::SIGINT","","/libc.html#item.SIGINT"],["libc::SIGQUIT","","/libc.html#item.SIGQUIT"],["libc::SIGILL","","/libc.html#item.SIGILL"],["libc::SIGABRT","","/libc.html#item.SIGABRT"],["libc::SIGFPE","","/libc.html#item.SIGFPE"],["libc::SIGKILL","","/libc.html#item.SIGKILL"],["libc::SIGSEGV","","/libc.html#item.SIGSEGV"],["libc::SIGPIPE","","/libc.html#item.SIGPIPE"],["libc::SIGALRM","","/libc.html#item.SIGALRM"],["libc::SIGTERM","","/libc.html#item.SIGTERM"],["libc::SIG_DFL","","/libc.html#item.SIG_DFL"],["libc::SIG_IGN","","/libc.html#item.SIG_IGN"],["libc::SIG_ERR","","/libc.html#item.SIG_ERR"],["libc::SEEK_SET","","/libc.html#item.SEEK_SET"],["libc::SEEK_CUR","","/libc.html#item.SEEK_CUR"],["libc::SEEK_END","","/libc.html#item.SEEK_END"],["libc::O_RDONLY","","/libc.html#item.O_RDONLY"],["libc::O_WRONLY","","/libc.html#item.O_WRONLY"],["libc::O_RDWR","","/libc.html#item.O_RDWR"],["libc::O_ACCMODE","","/libc.html#item.O_ACCMODE"],["libc::O_APPEND","","/libc.html#item.O_APPEND"],["libc::O_ASYNC","","/libc.html#item.O_ASYNC"],["libc::O_CLOEXEC","","/libc.html#item.O_CLOEXEC"],["libc::O_CREAT","","/libc.html#item.O_CREAT"],["libc::O_DSYNC","","/libc.html#item.O_DSYNC"],["libc::O_EXCL","","/libc.html#item.O_EXCL"],["libc::O_NDELAY","","/libc.html#item.O_NDELAY"],["libc::O_NOCTTY","","/libc.html#item.O_NOCTTY"],["libc::O_NONBLOCK","","/libc.html#item.O_NONBLOCK"],["libc::O_RSYNC","","/libc.html#item.O_RSYNC"],["libc::O_SYNC","","/libc.html#item.O_SYNC"],["libc::O_TRUNC","","/libc.html#item.O_TRUNC"],["libc::O_ACCMODE","","/libc.html#item.O_ACCMODE.1"],["libc::O_APPEND","","/libc.html#item.O_APPEND.1"],["libc::O_ASYNC","","/libc.html#item.O_ASYNC.1"],["libc::O_CLOEXEC","","/libc.html#item.O_CLOEXEC.1"],["libc::O_CREAT","","/libc.html#item.O_CREAT.1"],["libc::O_DSYNC","","/libc.html#item.O_DSYNC.1"],["libc::O_EXCL","","/libc.html#item.O_EXCL.1"],["libc::O_NDELAY","","/libc.html#item.O_NDELAY.1"],["libc::O_NOCTTY","","/libc.html#item.O_NOCTTY.1"],["libc::O_NONBLOCK","","/libc.html#item.O_NONBLOCK.1"],["libc::O_SYNC","","/libc.html#item.O_SYNC.1"],["libc::O_TRUNC","","/libc.html#item.O_TRUNC.1"],["libc::CLOCK_REALTIME","","/libc.html#item.CLOCK_REALTIME"],["libc::CLOCK_MONOTONIC","","/libc.html#item.CLOCK_MONOTONIC"],["libc::CLOCK_PROCESS_CPUTIME_ID","","/libc.html#item.CLOCK_PROCESS_CPUTIME_ID"],["libc::CLOCK_THREAD_CPUTIME_ID","","/libc.html#item.CLOCK_THREAD_CPUTIME_ID"],["libc::CLOCK_MONOTONIC_RAW","","/libc.html#item.CLOCK_MONOTONIC_RAW"],["libc::CLOCK_REALTIME_COARSE","","/libc.html#item.CLOCK_REALTIME_COARSE"],["libc::CLOCK_MONOTONIC_COARSE","","/libc.html#item.CLOCK_MONOTONIC_COARSE"],["libc::CLOCK_BOOTTIME","","/libc.html#item.CLOCK_BOOTTIME"],["libc::CLOCK_REALTIME_ALARM","","/libc.html#item.CLOCK_REALTIME_ALARM"],["libc::CLOCK_BOOTTIME_ALARM","","/libc.html#item.CLOCK_BOOTTIME_ALARM"],["libc::CLOCK_TAI","","/libc.html#item.CLOCK_TAI"],["libc::SOCK_STREAM","","/libc.html#item.SOCK_STREAM"],["libc::SOCK_DGRAM","","/libc.html#item.SOCK_DGRAM"],["libc::EAI_BADFLAGS","","/libc.html#item.EAI_BADFLAGS"],["libc::EAI_NONAME","","/libc.html#item.EAI_NONAME"],["libc::EAI_AGAIN","","/libc.html#item.EAI_AGAIN"],["libc::EAI_FAIL","","/libc.html#item.EAI_FAIL"],["libc::EAI_NODATA","","/libc.html#item.EAI_NODATA"],["libc::EAI_FAMILY","","/libc.html#item.EAI_FAMILY"],["libc::EAI_SOCKTYPE","","/libc.html#item.EAI_SOCKTYPE"],["libc::EAI_SERVICE","","/libc.html#item.EAI_SERVICE"],["libc::EAI_MEMORY","","/libc.html#item.EAI_MEMORY"],["libc::EAI_SYSTEM","","/libc.html#item.EAI_SYSTEM"],["libc::EAI_OVERFLOW","","/libc.html#item.EAI_OVERFLOW"],["libc::EPERM","","/libc.html#item.EPERM"],["libc::ENOENT","","/libc.html#item.ENOENT"],["libc::ESRCH","","/libc.html#item.ESRCH"],["libc::EINTR","","/libc.html#item.EINTR"],["libc::EIO","","/libc.html#item.EIO"],["libc::ENXIO","","/libc.html#item.ENXIO"],["libc::E2BIG","","/libc.html#item.E2BIG"],["libc::ENOEXEC","","/libc.html#item.ENOEXEC"],["libc::EBADF","","/libc.html#item.EBADF"],["libc::ECHILD","","/libc.html#item.ECHILD"],["libc::EAGAIN","","/libc.html#item.EAGAIN"],["libc::ENOMEM","","/libc.html#item.ENOMEM"],["libc::EACCES","","/libc.html#item.EACCES"],["libc::EFAULT","","/libc.html#item.EFAULT"],["libc::ENOTBLK","","/libc.html#item.ENOTBLK"],["libc::EBUSY","","/libc.html#item.EBUSY"],["libc::EEXIST","","/libc.html#item.EEXIST"],["libc::EXDEV","","/libc.html#item.EXDEV"],["libc::ENODEV","","/libc.html#item.ENODEV"],["libc::ENOTDIR","","/libc.html#item.ENOTDIR"],["libc::EISDIR","","/libc.html#item.EISDIR"],["libc::EINVAL","","/libc.html#item.EINVAL"],["libc::ENFILE","","/libc.html#item.ENFILE"],["libc::EMFILE","","/libc.html#item.EMFILE"],["libc::ENOTTY","","/libc.html#item.ENOTTY"],["libc::ETXTBSY","","/libc.html#item.ETXTBSY"],["libc::EFBIG","","/libc.html#item.EFBIG"],["libc::ENOSPC","","/libc.html#item.ENOSPC"],["libc::ESPIPE","","/libc.html#item.ESPIPE"],["libc::EROFS","","/libc.html#item.EROFS"],["libc::EMLINK","","/libc.html#item.EMLINK"],["libc::EPIPE","","/libc.html#item.EPIPE"],["libc::EDOM","","/libc.html#item.EDOM"],["libc::ERANGE","","/libc.html#item.ERANGE"],["libc::EWOULDBLOCK","","/libc.html#item.EWOULDBLOCK"],["libc::EWOULDBLOCK","","/libc.html#item.EWOULDBLOCK.1"],["libc::POLLIN","","/libc.html#item.POLLIN"],["libc::POLLPRI","","/libc.html#item.POLLPRI"],["libc::POLLOUT","","/libc.html#item.POLLOUT"],["libc::POLLERR","","/libc.html#item.POLLERR"],["libc::POLLHUP","","/libc.html#item.POLLHUP"],["libc::POLLNVAL","","/libc.html#item.POLLNVAL"],["libc::POLLRDNORM","","/libc.html#item.POLLRDNORM"],["libc::POLLWRNORM","","/libc.html#item.POLLWRNORM"],["libc::POLLRDBAND","","/libc.html#item.POLLRDBAND"],["libc::POLLWRBAND","","/libc.html#item.POLLWRBAND"],["libc::MSG_OOB","","/libc.html#item.MSG_OOB"],["libc::MSG_PEEK","","/libc.html#item.MSG_PEEK"],["libc::MSG_DONTROUTE","","/libc.html#item.MSG_DONTROUTE"],["libc::MSG_CTRUNC","","/libc.html#item.MSG_CTRUNC"],["libc::MSG_TRUNC","","/libc.html#item.MSG_TRUNC"],["libc::MSG_DONTWAIT","","/libc.html#item.MSG_DONTWAIT"],["libc::MSG_EOR","","/libc.html#item.MSG_EOR"],["libc::MSG_WAITALL","","/libc.html#item.MSG_WAITALL"],["libc::MSG_FIN","","/libc.html#item.MSG_FIN"],["libc::MSG_SYN","","/libc.html#item.MSG_SYN"],["libc::MSG_CONFIRM","","/libc.html#item.MSG_CONFIRM"],["libc::MSG_RST","","/libc.html#item.MSG_RST"],["libc::MSG_ERRQUEUE","","/libc.html#item.MSG_ERRQUEUE"],["libc::MSG_NOSIGNAL","","/libc.html#item.MSG_NOSIGNAL"],["libc::MSG_MORE","","/libc.html#item.MSG_MORE"],["libc::MSG_WAITFORONE","","/libc.html#item.MSG_WAITFORONE"],["libc::MSG_FASTOPEN","","/libc.html#item.MSG_FASTOPEN"],["libc::MSG_CMSG_CLOEXEC","","/libc.html#item.MSG_CMSG_CLOEXEC"],["libc::F_DUPFD","","/libc.html#item.F_DUPFD"],["libc::F_GETFD","","/libc.html#item.F_GETFD"],["libc::F_SETFD","","/libc.html#item.F_SETFD"],["libc::F_GETFL","","/libc.html#item.F_GETFL"],["libc::F_SETFL","","/libc.html#item.F_SETFL"],["libc::FD_CLOEXEC","","/libc.html#item.FD_CLOEXEC"],["libc::FIONBIO","","/libc.html#item.FIONBIO"],["libc::FIOCLEX","","/libc.html#item.FIOCLEX"],["libc::FIONBIO","","/libc.html#item.FIONBIO.1"],["libc::FIOCLEX","","/libc.html#item.FIOCLEX.1"],["libc::FIONBIO","","/libc.html#item.FIONBIO.2"],["libc::FIOCLEX","","/libc.html#item.FIOCLEX.2"],["libc::AF_UNSPEC","","/libc.html#item.AF_UNSPEC"],["libc::AF_UNIX","","/libc.html#item.AF_UNIX"],["libc::AF_LOCAL","","/libc.html#item.AF_LOCAL"],["libc::AF_INET","","/libc.html#item.AF_INET"],["libc::AF_AX25","","/libc.html#item.AF_AX25"],["libc::AF_IPX","","/libc.html#item.AF_IPX"],["libc::AF_APPLETALK","","/libc.html#item.AF_APPLETALK"],["libc::AF_NETROM","","/libc.html#item.AF_NETROM"],["libc::AF_BRIDGE","","/libc.html#item.AF_BRIDGE"],["libc::AF_ATMPVC","","/libc.html#item.AF_ATMPVC"],["libc::AF_X25","","/libc.html#item.AF_X25"],["libc::AF_INET6","","/libc.html#item.AF_INET6"],["libc::AF_ROSE","","/libc.html#item.AF_ROSE"],["libc::AF_DECnet","","/libc.html#item.AF_DECnet"],["libc::AF_NETBEUI","","/libc.html#item.AF_NETBEUI"],["libc::AF_SECURITY","","/libc.html#item.AF_SECURITY"],["libc::AF_KEY","","/libc.html#item.AF_KEY"],["libc::AF_NETLINK","","/libc.html#item.AF_NETLINK"],["libc::AF_ROUTE","","/libc.html#item.AF_ROUTE"],["libc::AF_PACKET","","/libc.html#item.AF_PACKET"],["libc::AF_ASH","","/libc.html#item.AF_ASH"],["libc::AF_ECONET","","/libc.html#item.AF_ECONET"],["libc::AF_ATMSVC","","/libc.html#item.AF_ATMSVC"],["libc::AF_RDS","","/libc.html#item.AF_RDS"],["libc::AF_SNA","","/libc.html#item.AF_SNA"],["libc::AF_IRDA","","/libc.html#item.AF_IRDA"],["libc::AF_PPPOX","","/libc.html#item.AF_PPPOX"],["libc::AF_WANPIPE","","/libc.html#item.AF_WANPIPE"],["libc::AF_LLC","","/libc.html#item.AF_LLC"],["libc::AF_CAN","","/libc.html#item.AF_CAN"],["libc::AF_TIPC","","/libc.html#item.AF_TIPC"],["libc::AF_BLUETOOTH","","/libc.html#item.AF_BLUETOOTH"],["libc::AF_IUCV","","/libc.html#item.AF_IUCV"],["libc::AF_RXRPC","","/libc.html#item.AF_RXRPC"],["libc::AF_ISDN","","/libc.html#item.AF_ISDN"],["libc::AF_PHONET","","/libc.html#item.AF_PHONET"],["libc::AF_IEEE802154","","/libc.html#item.AF_IEEE802154"],["libc::AF_CAIF","","/libc.html#item.AF_CAIF"],["libc::AF_ALG","","/libc.html#item.AF_ALG"],["libc::AF_UNSPEC","","/libc.html#item.AF_UNSPEC.1"],["libc::AF_LOCAL","","/libc.html#item.AF_LOCAL.1"],["libc::AF_UNIX","","/libc.html#item.AF_UNIX.1"],["libc::AF_INET","","/libc.html#item.AF_INET.1"],["libc::AF_IMPLINK","","/libc.html#item.AF_IMPLINK"],["libc::AF_PUP","","/libc.html#item.AF_PUP"],["libc::AF_CHAOS","","/libc.html#item.AF_CHAOS"],["libc::AF_NS","","/libc.html#item.AF_NS"],["libc::AF_ISO","","/libc.html#item.AF_ISO"],["libc::AF_OSI","","/libc.html#item.AF_OSI"],["libc::AF_ECMA","","/libc.html#item.AF_ECMA"],["libc::AF_DATAKIT","","/libc.html#item.AF_DATAKIT"],["libc::AF_CCITT","","/libc.html#item.AF_CCITT"],["libc::AF_SNA","","/libc.html#item.AF_SNA.1"],["libc::AF_DECnet","","/libc.html#item.AF_DECnet.1"],["libc::AF_DLI","","/libc.html#item.AF_DLI"],["libc::AF_LAT","","/libc.html#item.AF_LAT"],["libc::AF_HYLINK","","/libc.html#item.AF_HYLINK"],["libc::AF_APPLETALK","","/libc.html#item.AF_APPLETALK.1"],["libc::AF_ROUTE","","/libc.html#item.AF_ROUTE.1"],["libc::AF_LINK","","/libc.html#item.AF_LINK"],["libc::pseudo_AF_XTP","","/libc.html#item.pseudo_AF_XTP"],["libc::AF_COIP","","/libc.html#item.AF_COIP"],["libc::AF_CNT","","/libc.html#item.AF_CNT"],["libc::pseudo_AF_RTIP","","/libc.html#item.pseudo_AF_RTIP"],["libc::AF_IPX","","/libc.html#item.AF_IPX.1"],["libc::AF_SIP","","/libc.html#item.AF_SIP"],["libc::pseudo_AF_PIP","","/libc.html#item.pseudo_AF_PIP"],["libc::AF_ISDN","","/libc.html#item.AF_ISDN.1"],["libc::AF_E164","","/libc.html#item.AF_E164"],["libc::pseudo_AF_KEY","","/libc.html#item.pseudo_AF_KEY"],["libc::AF_INET6","","/libc.html#item.AF_INET6.1"],["libc::AF_NATM","","/libc.html#item.AF_NATM"],["libc::AF_SYSTEM","","/libc.html#item.AF_SYSTEM"],["libc::AF_NETBIOS","","/libc.html#item.AF_NETBIOS"],["libc::AF_PPP","","/libc.html#item.AF_PPP"],["libc::pseudo_AF_HDRCMPLT","","/libc.html#item.pseudo_AF_HDRCMPLT"],["libc::AF_SYS_CONTROL","","/libc.html#item.AF_SYS_CONTROL"],["libc::SHUT_RD","","/libc.html#item.SHUT_RD"],["libc::SHUT_WR","","/libc.html#item.SHUT_WR"],["libc::SHUT_RDWR","","/libc.html#item.SHUT_RDWR"],["libc::DT_UNKNOWN","","/libc.html#item.DT_UNKNOWN"],["libc::DT_FIFO","","/libc.html#item.DT_FIFO"],["libc::DT_CHR","","/libc.html#item.DT_CHR"],["libc::DT_DIR","","/libc.html#item.DT_DIR"],["libc::DT_BLK","","/libc.html#item.DT_BLK"],["libc::DT_REG","","/libc.html#item.DT_REG"],["libc::DT_LNK","","/libc.html#item.DT_LNK"],["libc::DT_SOCK","","/libc.html#item.DT_SOCK"],["libc::S_IFIFO","","/libc.html#item.S_IFIFO"],["libc::S_IFCHR","","/libc.html#item.S_IFCHR"],["libc::S_IFBLK","","/libc.html#item.S_IFBLK"],["libc::S_IFDIR","","/libc.html#item.S_IFDIR"],["libc::S_IFREG","","/libc.html#item.S_IFREG"],["libc::S_IFLNK","","/libc.html#item.S_IFLNK"],["libc::S_IFSOCK","","/libc.html#item.S_IFSOCK"],["libc::S_IFMT","","/libc.html#item.S_IFMT"],["libm::tests","","/libm/tests.html"],["libm::acos","","/libm.html#item.acos"],["libm::acosf","","/libm.html#item.acosf"],["libm::acosh","","/libm.html#item.acosh"],["libm::acoshf","","/libm.html#item.acoshf"],["libm::asin","","/libm.html#item.asin"],["libm::asinf","","/libm.html#item.asinf"],["libm::asinh","","/libm.html#item.asinh"],["libm::asinhf","","/libm.html#item.asinhf"],["libm::atan","","/libm.html#item.atan"],["libm::atan2","","/libm.html#item.atan2"],["libm::atan2f","","/libm.html#item.atan2f"],["libm::atanf","","/libm.html#item.atanf"],["libm::atanh","","/libm.html#item.atanh"],["libm::atanhf","","/libm.html#item.atanhf"],["libm::cbrt","","/libm.html#item.cbrt"],["libm::cbrtf","","/libm.html#item.cbrtf"],["libm::ceil","","/libm.html#item.ceil"],["libm::ceilf","","/libm.html#item.ceilf"],["libm::copysign","","/libm.html#item.copysign"],["libm::copysignf","","/libm.html#item.copysignf"],["libm::cos","","/libm.html#item.cos"],["libm::cosf","","/libm.html#item.cosf"],["libm::cosh","","/libm.html#item.cosh"],["libm::coshf","","/libm.html#item.coshf"],["libm::erf","","/libm.html#item.erf"],["libm::erfc","","/libm.html#item.erfc"],["libm::erff","","/libm.html#item.erff"],["libm::erfcf","","/libm.html#item.erfcf"],["libm::exp","","/libm.html#item.exp"],["libm::expf","","/libm.html#item.expf"],["libm::expm1","","/libm.html#item.expm1"],["libm::expm1f","","/libm.html#item.expm1f"],["libm::fabs","","/libm.html#item.fabs"],["libm::fabsf","","/libm.html#item.fabsf"],["libm::fdim","","/libm.html#item.fdim"],["libm::fdimf","","/libm.html#item.fdimf"],["libm::floor","","/libm.html#item.floor"],["libm::floorf","","/libm.html#item.floorf"],["libm::fma","","/libm.html#item.fma"],["libm::fmaf","","/libm.html#item.fmaf"],["libm::fmax","","/libm.html#item.fmax"],["libm::fmaxf","","/libm.html#item.fmaxf"],["libm::fmin","","/libm.html#item.fmin"],["libm::fminf","","/libm.html#item.fminf"],["libm::fmod","","/libm.html#item.fmod"],["libm::fmodf","","/libm.html#item.fmodf"],["libm::frexp","","/libm.html#item.frexp"],["libm::frexpf","","/libm.html#item.frexpf"],["libm::hypot","","/libm.html#item.hypot"],["libm::hypotf","","/libm.html#item.hypotf"],["libm::ilogb","","/libm.html#item.ilogb"],["libm::ilogbf","","/libm.html#item.ilogbf"],["libm::ldexp","","/libm.html#item.ldexp"],["libm::ldexpf","","/libm.html#item.ldexpf"],["libm::lgamma","","/libm.html#item.lgamma"],["libm::lgammaf","","/libm.html#item.lgammaf"],["libm::log","","/libm.html#item.log"],["libm::log10","","/libm.html#item.log10"],["libm::log10f","","/libm.html#item.log10f"],["libm::log1p","","/libm.html#item.log1p"],["libm::log1pf","","/libm.html#item.log1pf"],["libm::log2","","/libm.html#item.log2"],["libm::log2f","","/libm.html#item.log2f"],["libm::logf","","/libm.html#item.logf"],["libm::modf","","/libm.html#item.modf"],["libm::modff","","/libm.html#item.modff"],["libm::nextafter","","/libm.html#item.nextafter"],["libm::nextafterf","","/libm.html#item.nextafterf"],["libm::pow","","/libm.html#item.pow"],["libm::powf","","/libm.html#item.powf"],["libm::remainder","","/libm.html#item.remainder"],["libm::remainderf","","/libm.html#item.remainderf"],["libm::remquo","","/libm.html#item.remquo"],["libm::remquof","","/libm.html#item.remquof"],["libm::round","","/libm.html#item.round"],["libm::roundf","","/libm.html#item.roundf"],["libm::scalbn","","/libm.html#item.scalbn"],["libm::scalbnf","","/libm.html#item.scalbnf"],["libm::sin","","/libm.html#item.sin"],["libm::sinf","","/libm.html#item.sinf"],["libm::sinh","","/libm.html#item.sinh"],["libm::sinhf","","/libm.html#item.sinhf"],["libm::sqrt","","/libm.html#item.sqrt"],["libm::sqrtf","","/libm.html#item.sqrtf"],["libm::tan","","/libm.html#item.tan"],["libm::tanf","","/libm.html#item.tanf"],["libm::tanh","","/libm.html#item.tanh"],["libm::tanhf","","/libm.html#item.tanhf"],["libm::tgamma","","/libm.html#item.tgamma"],["libm::tgammaf","","/libm.html#item.tgammaf"],["libm::trunc","","/libm.html#item.trunc"],["libm::truncf","","/libm.html#item.truncf"],["libm::tests::test_libm_fns","","/libm/tests.html#item.test_libm_fns"],["std::builtins"," Builtin types and their method implementations.","/std/builtins.html"],["std::cmp"," Equality and comparison","/std/cmp.html"],["std::collections"," Heap-allocating collections.","/std/collections.html"],["std::ffi"," Utilities related to FFI bindings.","/std/ffi.html"],["std::fmt"," String formatting","/std/fmt.html"],["std::fs"," Working with files and directories","/std/fs.html"],["std::hash"," Generic (non-cryptographic) hashing support","/std/hash.html"],["std::intrinsics"," Functions implemented directly in the compiler.","/std/intrinsics.html"],["std::io"," Streams and other byte I/O functionality","/std/io.html"],["std::iter"," Ranges and iterators.","/std/iter.html"],["std::math"," Math functions","/std/math.html"],["std::mem"," Working with memory (allocation, slices, copying, ...)","/std/mem.html"],["std::net"," Network sockets","/std/net.html"],["std::option"," Optional values","/std/option.html"],["std::panicking"," Panic support macros and functions","/std/panicking.html"],["std::prelude"," Items available everywhere without having to `use` them","/std/prelude.html"],["std::process"," A module for working with processes.","/std/process.html"],["std::random"," Random number generation","/std/random.html"],["std::result"," Error handling functionality.","/std/result.html"],["std::rtti"," Run time type information","/std/rtti.html"],["std::runtime"," Run time glue code (entrypoints, tests, ...)","/std/runtime.html"],["std::string"," String functions","/std/string.html"],["std::time"," Time and duration functions","/std/time.html"],["std::internal","","/std/internal.html"],["std::util"," Contains various utility functions that are useful in the generic context where the type operated on is","/std/util.html"],["std::compile_fail"," Causes the compilation to fail if reached.","/std/compile_fail.html"],["std::assert"," Panics if `cond` evaluates to false.","/std/assert.html"],["std::assert_eq"," Panics if `lhs` and `rhs` are not equal.","/std/assert_eq.html"],["std::assert_ne"," Panics if `lhs` and `rhs` are equal.","/std/assert_ne.html"],["std::debug_assert"," Panics if `cond` evaluates to false when compiled in debug mode. Otherwise, does nothing.","/std/debug_assert.html"],["std::debug_assert_eq"," Panics if `lhs` and `rhs` are not equal when compiled in debug mode. Otherwise, does nothing.","/std/debug_assert_eq.html"],["std::debug_assert_ne"," Panics if `lhs` and `rhs` are equal when compiled in debug mode. Otherwise, does nothing.","/std/debug_assert_ne.html"],["std::unreachable"," Treats the location as unreachable during program flow.","/std/unreachable.html"],["std::line"," Returns the line in the source code at which the macro was invoked.","/std/line.html"],["std::column"," Returns the column in the source code at which the macro was invoked.","/std/column.html"],["std::file"," Returns the file in the source code at which the macro was invoked.","/std/file.html"],["std::env"," Returns the value of an environment variable during compilation.","/std/env.html"],["std::include_bytes","","/std/include_bytes.html"],["std::concat"," Concatenates strings at compile time.","/std/concat.html"],["std::dbg"," Print a message to standard error with code location information.","/std/dbg.html"],["std::builtins::tuples"," Method implementations for tuple types","/std/builtins/tuples.html"],["std::builtins::tests","","/std/builtins/tests.html"],["std::builtins::void"," Unit type (`()`)","/std/builtins/void.html"],["std::builtins::bool"," Boolean type","/std/builtins/bool.html"],["std::builtins::never"," Never type (`!`)","/std/builtins/never.html"],["std::builtins::u8"," 8-bit unsigned integer (byte)","/std/builtins/u8.html"],["std::builtins::u16"," 16-bit unsigned integer","/std/builtins/u16.html"],["std::builtins::u32"," 32-bit unsigned integer","/std/builtins/u32.html"],["std::builtins::u64"," 64-bit unsigned integer","/std/builtins/u64.html"],["std::builtins::u128"," 128-bit unsigned integer","/std/builtins/u128.html"],["std::builtins::usize"," Native unsigned integer (machine word)","/std/builtins/usize.html"],["std::builtins::i8"," Signed 8-bit integer","/std/builtins/i8.html"],["std::builtins::i16"," Signed 16-bit integer","/std/builtins/i16.html"],["std::builtins::i32"," Signed 32-bit integer","/std/builtins/i32.html"],["std::builtins::i64"," Signed 64-bit integer","/std/builtins/i64.html"],["std::builtins::i128"," Signed 128-bit integer","/std/builtins/i128.html"],["std::builtins::isize"," Native signed integer (machine word)","/std/builtins/isize.html"],["std::builtins::f32"," Single precision floating point type","/std/builtins/f32.html"],["std::builtins::f64"," Double precision floating point type","/std/builtins/f64.html"],["std::builtins::array"," Fixed size arrays","/std/builtins/array.html"],["std::builtins::signed_of"," Signed integer type of the same size as the original type.","/std/builtins/signed_of.html"],["std::builtins::element_of"," Element type of the provided array","/std/builtins/element_of.html"],["std::builtins::unsigned_of"," Unsigned integer type of the same size as the original type.","/std/builtins/unsigned_of.html"],["std::builtins::deref_of"," Type of the pointed-to value","/std/builtins/deref_of.html"],["std::builtins::tuple_head_of"," Type of the first element of the provided tuple","/std/builtins/tuple_head_of.html"],["std::builtins::tuple_tail_of"," Tuple type equivalent to the provided one without the first element","/std/builtins/tuple_tail_of.html"],["std::builtins::return_type_of"," Return type of the provided function","/std/builtins/return_type_of.html"],["std::builtins::arguments_of"," Tuple of argument types of the provided function","/std/builtins/arguments_of.html"],["std::builtins::BuiltinComparable"," This mixin implements Equatable and Comparable for types that have natively implemented","/std/builtins/BuiltinComparable.html"],["std::builtins::IntegerParsable","","/std/builtins/IntegerParsable.html"],["std::builtins::IntegerFormattable","","/std/builtins/IntegerFormattable.html"],["std::builtins::FloatFormattable","","/std/builtins/FloatFormattable.html"],["std::builtins::BitOps","","/std/builtins/BitOps.html"],["std::builtins::FloatOps","","/std/builtins/FloatOps.html"],["std::builtins::Any"," Matches any type","/std/builtins/Any.html"],["std::builtins::ZeroSized"," Matches zero-sized types (void, named function types, empty structs, empty arrays, ...)","/std/builtins/ZeroSized.html"],["std::builtins::Primitive"," Matches all primitive types","/std/builtins/Primitive.html"],["std::builtins::Numeric"," Integer and floating point types","/std/builtins/Numeric.html"],["std::builtins::Integer"," Integer types","/std/builtins/Integer.html"],["std::builtins::FloatingPoint"," Floating point types","/std/builtins/FloatingPoint.html"],["std::builtins::Signed"," Signed integer types (`i8`, `i16`, `i32`, ...)","/std/builtins/Signed.html"],["std::builtins::Unsigned"," Unsigned integer types (`u8`, `u16`, `u32`, ...)","/std/builtins/Unsigned.html"],["std::builtins::Pointer"," All pointers","/std/builtins/Pointer.html"],["std::builtins::Array"," All (fixed-size) arrays","/std/builtins/Array.html"],["std::builtins::Tuple"," All tuples","/std/builtins/Tuple.html"],["std::builtins::NamedFunction"," All named functions (including lambdas, but excluding closures)","/std/builtins/NamedFunction.html"],["std::builtins::FunctionPointer"," Function pointers","/std/builtins/FunctionPointer.html"],["std::builtins::Callable"," All callable objects (named functions, closures, and function pointers)","/std/builtins/Callable.html"],["std::builtins::ArrayOf"," Arrays with element type `T`","/std/builtins/ArrayOf.html"],["std::builtins::PointerOf"," Pointers to `T` (regardless of mutability)","/std/builtins/PointerOf.html"],["std::builtins::BitOps::rotate_left","","/std/builtins/BitOps.html#item.rotate_left"],["std::builtins::BitOps::rotate_right","","/std/builtins/BitOps.html#item.rotate_right"],["std::builtins::BuiltinComparable::equals","","/std/builtins/BuiltinComparable.html#item.equals"],["std::builtins::BuiltinComparable::not_equals","","/std/builtins/BuiltinComparable.html#item.not_equals"],["std::builtins::BuiltinComparable::compare","","/std/builtins/BuiltinComparable.html#item.compare"],["std::builtins::BuiltinComparable::less_than","","/std/builtins/BuiltinComparable.html#item.less_than"],["std::builtins::BuiltinComparable::less_than_or_equal","","/std/builtins/BuiltinComparable.html#item.less_than_or_equal"],["std::builtins::BuiltinComparable::greater_than","","/std/builtins/BuiltinComparable.html#item.greater_than"],["std::builtins::BuiltinComparable::greater_than_or_equal","","/std/builtins/BuiltinComparable.html#item.greater_than_or_equal"],["std::builtins::FloatFormattable::fmt","","/std/builtins/FloatFormattable.html#item.fmt"],["std::builtins::FloatOps::nan","","/std/builtins/FloatOps.html#item.nan"],["std::builtins::FloatOps::infinity","","/std/builtins/FloatOps.html#item.infinity"],["std::builtins::FloatOps::neg_infinity","","/std/builtins/FloatOps.html#item.neg_infinity"],["std::builtins::FloatOps::is_nan","","/std/builtins/FloatOps.html#item.is_nan"],["std::builtins::FloatOps::is_infinite","","/std/builtins/FloatOps.html#item.is_infinite"],["std::builtins::FloatOps::is_finite","","/std/builtins/FloatOps.html#item.is_finite"],["std::builtins::IntegerFormattable::fmt","","/std/builtins/IntegerFormattable.html#item.fmt"],["std::builtins::IntegerParsable::parse","","/std/builtins/IntegerParsable.html#item.parse"],["std::builtins::IntegerParsable::parse_with_radix","","/std/builtins/IntegerParsable.html#item.parse_with_radix"],["std::builtins::array::as_slice","","/std/builtins/array.html#item.as_slice"],["std::builtins::array::as_slice_mut","","/std/builtins/array.html#item.as_slice_mut"],["std::builtins::array::iter","","/std/builtins/array.html#item.iter"],["std::builtins::bool::equals","","/std/builtins/bool.html#item.equals"],["std::builtins::bool::compare","","/std/builtins/bool.html#item.compare"],["std::builtins::bool::hash","","/std/builtins/bool.html#item.hash"],["std::builtins::bool::fmt","","/std/builtins/bool.html#item.fmt"],["std::builtins::f32::is_sign_negative","","/std/builtins/f32.html#item.is_sign_negative"],["std::builtins::f32::max_value","","/std/builtins/f32.html#item.max_value"],["std::builtins::f32::min_value","","/std/builtins/f32.html#item.min_value"],["std::builtins::f32::min_positive","","/std/builtins/f32.html#item.min_positive"],["std::builtins::f32::epsilon","","/std/builtins/f32.html#item.epsilon"],["std::builtins::f32::acos","","/std/builtins/f32.html#item.acos"],["std::builtins::f32::asin","","/std/builtins/f32.html#item.asin"],["std::builtins::f32::atan","","/std/builtins/f32.html#item.atan"],["std::builtins::f32::atan2","","/std/builtins/f32.html#item.atan2"],["std::builtins::f32::atanh","","/std/builtins/f32.html#item.atanh"],["std::builtins::f32::cbrt","","/std/builtins/f32.html#item.cbrt"],["std::builtins::f32::ceil","","/std/builtins/f32.html#item.ceil"],["std::builtins::f32::cos","","/std/builtins/f32.html#item.cos"],["std::builtins::f32::cosh","","/std/builtins/f32.html#item.cosh"],["std::builtins::f32::erf","","/std/builtins/f32.html#item.erf"],["std::builtins::f32::erfc","","/std/builtins/f32.html#item.erfc"],["std::builtins::f32::exp","","/std/builtins/f32.html#item.exp"],["std::builtins::f32::floor","","/std/builtins/f32.html#item.floor"],["std::builtins::f32::frexp","","/std/builtins/f32.html#item.frexp"],["std::builtins::f32::ldexp","","/std/builtins/f32.html#item.ldexp"],["std::builtins::f32::log","","/std/builtins/f32.html#item.log"],["std::builtins::f32::log2","","/std/builtins/f32.html#item.log2"],["std::builtins::f32::log10","","/std/builtins/f32.html#item.log10"],["std::builtins::f32::modf","","/std/builtins/f32.html#item.modf"],["std::builtins::f32::pow","","/std/builtins/f32.html#item.pow"],["std::builtins::f32::round","","/std/builtins/f32.html#item.round"],["std::builtins::f32::sin","","/std/builtins/f32.html#item.sin"],["std::builtins::f32::sinh","","/std/builtins/f32.html#item.sinh"],["std::builtins::f32::sqrt","","/std/builtins/f32.html#item.sqrt"],["std::builtins::f32::tan","","/std/builtins/f32.html#item.tan"],["std::builtins::f32::tanh","","/std/builtins/f32.html#item.tanh"],["std::builtins::f32::trunc","","/std/builtins/f32.html#item.trunc"],["std::builtins::f64::is_sign_negative","","/std/builtins/f64.html#item.is_sign_negative"],["std::builtins::f64::max_value","","/std/builtins/f64.html#item.max_value"],["std::builtins::f64::min_value","","/std/builtins/f64.html#item.min_value"],["std::builtins::f64::min_positive","","/std/builtins/f64.html#item.min_positive"],["std::builtins::f64::epsilon","","/std/builtins/f64.html#item.epsilon"],["std::builtins::f64::acos","","/std/builtins/f64.html#item.acos"],["std::builtins::f64::asin","","/std/builtins/f64.html#item.asin"],["std::builtins::f64::atan","","/std/builtins/f64.html#item.atan"],["std::builtins::f64::atan2","","/std/builtins/f64.html#item.atan2"],["std::builtins::f64::atanh","","/std/builtins/f64.html#item.atanh"],["std::builtins::f64::cbrt","","/std/builtins/f64.html#item.cbrt"],["std::builtins::f64::ceil","","/std/builtins/f64.html#item.ceil"],["std::builtins::f64::cos","","/std/builtins/f64.html#item.cos"],["std::builtins::f64::cosh","","/std/builtins/f64.html#item.cosh"],["std::builtins::f64::erf","","/std/builtins/f64.html#item.erf"],["std::builtins::f64::erfc","","/std/builtins/f64.html#item.erfc"],["std::builtins::f64::exp","","/std/builtins/f64.html#item.exp"],["std::builtins::f64::floor","","/std/builtins/f64.html#item.floor"],["std::builtins::f64::frexp","","/std/builtins/f64.html#item.frexp"],["std::builtins::f64::ldexp","","/std/builtins/f64.html#item.ldexp"],["std::builtins::f64::log","","/std/builtins/f64.html#item.log"],["std::builtins::f64::log2","","/std/builtins/f64.html#item.log2"],["std::builtins::f64::log10","","/std/builtins/f64.html#item.log10"],["std::builtins::f64::modf","","/std/builtins/f64.html#item.modf"],["std::builtins::f64::pow","","/std/builtins/f64.html#item.pow"],["std::builtins::f64::round","","/std/builtins/f64.html#item.round"],["std::builtins::f64::sin","","/std/builtins/f64.html#item.sin"],["std::builtins::f64::sinh","","/std/builtins/f64.html#item.sinh"],["std::builtins::f64::sqrt","","/std/builtins/f64.html#item.sqrt"],["std::builtins::f64::tan","","/std/builtins/f64.html#item.tan"],["std::builtins::f64::tanh","","/std/builtins/f64.html#item.tanh"],["std::builtins::f64::trunc","","/std/builtins/f64.html#item.trunc"],["std::builtins::i128::max_value","","/std/builtins/i128.html#item.max_value"],["std::builtins::i128::min_value","","/std/builtins/i128.html#item.min_value"],["std::builtins::i16::max_value","","/std/builtins/i16.html#item.max_value"],["std::builtins::i16::min_value","","/std/builtins/i16.html#item.min_value"],["std::builtins::i32::max_value","","/std/builtins/i32.html#item.max_value"],["std::builtins::i32::min_value","","/std/builtins/i32.html#item.min_value"],["std::builtins::i64::max_value","","/std/builtins/i64.html#item.max_value"],["std::builtins::i64::min_value","","/std/builtins/i64.html#item.min_value"],["std::builtins::i8::max_value","","/std/builtins/i8.html#item.max_value"],["std::builtins::i8::min_value","","/std/builtins/i8.html#item.min_value"],["std::builtins::isize::max_value","","/std/builtins/isize.html#item.max_value"],["std::builtins::isize::min_value","","/std/builtins/isize.html#item.min_value"],["std::builtins::never::equals","","/std/builtins/never.html#item.equals"],["std::builtins::never::compare","","/std/builtins/never.html#item.compare"],["std::builtins::never::hash","","/std/builtins/never.html#item.hash"],["std::builtins::never::fmt","","/std/builtins/never.html#item.fmt"],["std::builtins::tests::unsigned_num_limits","","/std/builtins/tests.html#item.unsigned_num_limits"],["std::builtins::tests::signed_num_limits","","/std/builtins/tests.html#item.signed_num_limits"],["std::builtins::tests::test_signed_of","","/std/builtins/tests.html#item.test_signed_of"],["std::builtins::tests::test_unsigned_of","","/std/builtins/tests.html#item.test_unsigned_of"],["std::builtins::tests::test_deref_of","","/std/builtins/tests.html#item.test_deref_of"],["std::builtins::tuples::tuple_1","","/std/builtins/tuples/tuple_1.html"],["std::builtins::tuples::tuple_2","","/std/builtins/tuples/tuple_2.html"],["std::builtins::tuples::tuple_3","","/std/builtins/tuples/tuple_3.html"],["std::builtins::tuples::tuple_4","","/std/builtins/tuples/tuple_4.html"],["std::builtins::tuples::tuple_5","","/std/builtins/tuples/tuple_5.html"],["std::builtins::tuples::tuple_6","","/std/builtins/tuples/tuple_6.html"],["std::builtins::tuples::tuple_7","","/std/builtins/tuples/tuple_7.html"],["std::builtins::tuples::tuple_8","","/std/builtins/tuples/tuple_8.html"],["std::builtins::tuples::tuple_1::equals","","/std/builtins/tuples/tuple_1.html#item.equals"],["std::builtins::tuples::tuple_1::compare","","/std/builtins/tuples/tuple_1.html#item.compare"],["std::builtins::tuples::tuple_1::hash","","/std/builtins/tuples/tuple_1.html#item.hash"],["std::builtins::tuples::tuple_2::equals","","/std/builtins/tuples/tuple_2.html#item.equals"],["std::builtins::tuples::tuple_2::compare","","/std/builtins/tuples/tuple_2.html#item.compare"],["std::builtins::tuples::tuple_2::hash","","/std/builtins/tuples/tuple_2.html#item.hash"],["std::builtins::tuples::tuple_3::equals","","/std/builtins/tuples/tuple_3.html#item.equals"],["std::builtins::tuples::tuple_3::compare","","/std/builtins/tuples/tuple_3.html#item.compare"],["std::builtins::tuples::tuple_3::hash","","/std/builtins/tuples/tuple_3.html#item.hash"],["std::builtins::tuples::tuple_4::equals","","/std/builtins/tuples/tuple_4.html#item.equals"],["std::builtins::tuples::tuple_4::compare","","/std/builtins/tuples/tuple_4.html#item.compare"],["std::builtins::tuples::tuple_4::hash","","/std/builtins/tuples/tuple_4.html#item.hash"],["std::builtins::tuples::tuple_5::equals","","/std/builtins/tuples/tuple_5.html#item.equals"],["std::builtins::tuples::tuple_5::compare","","/std/builtins/tuples/tuple_5.html#item.compare"],["std::builtins::tuples::tuple_5::hash","","/std/builtins/tuples/tuple_5.html#item.hash"],["std::builtins::tuples::tuple_6::equals","","/std/builtins/tuples/tuple_6.html#item.equals"],["std::builtins::tuples::tuple_6::compare","","/std/builtins/tuples/tuple_6.html#item.compare"],["std::builtins::tuples::tuple_6::hash","","/std/builtins/tuples/tuple_6.html#item.hash"],["std::builtins::tuples::tuple_7::equals","","/std/builtins/tuples/tuple_7.html#item.equals"],["std::builtins::tuples::tuple_7::compare","","/std/builtins/tuples/tuple_7.html#item.compare"],["std::builtins::tuples::tuple_7::hash","","/std/builtins/tuples/tuple_7.html#item.hash"],["std::builtins::tuples::tuple_8::equals","","/std/builtins/tuples/tuple_8.html#item.equals"],["std::builtins::tuples::tuple_8::compare","","/std/builtins/tuples/tuple_8.html#item.compare"],["std::builtins::tuples::tuple_8::hash","","/std/builtins/tuples/tuple_8.html#item.hash"],["std::builtins::u128::max_value","","/std/builtins/u128.html#item.max_value"],["std::builtins::u128::min_value","","/std/builtins/u128.html#item.min_value"],["std::builtins::u16::max_value","","/std/builtins/u16.html#item.max_value"],["std::builtins::u16::min_value","","/std/builtins/u16.html#item.min_value"],["std::builtins::u32::max_value","","/std/builtins/u32.html#item.max_value"],["std::builtins::u32::min_value","","/std/builtins/u32.html#item.min_value"],["std::builtins::u64::max_value","","/std/builtins/u64.html#item.max_value"],["std::builtins::u64::min_value","","/std/builtins/u64.html#item.min_value"],["std::builtins::u8::max_value","","/std/builtins/u8.html#item.max_value"],["std::builtins::u8::min_value","","/std/builtins/u8.html#item.min_value"],["std::builtins::usize::max_value","","/std/builtins/usize.html#item.max_value"],["std::builtins::usize::min_value","","/std/builtins/usize.html#item.min_value"],["std::builtins::void::equals","","/std/builtins/void.html#item.equals"],["std::builtins::void::compare","","/std/builtins/void.html#item.compare"],["std::builtins::void::hash","","/std/builtins/void.html#item.hash"],["std::cmp::internal"," This module contains the target functions for operator overloading","/std/cmp/internal.html"],["std::cmp::max"," Returns the greater of the two arguments.","/std/cmp.html#item.max"],["std::cmp::min"," Returns the least of the two arguments.","/std/cmp.html#item.min"],["std::cmp::Equatable"," Types that can be compared for equality.","/std/cmp/Equatable.html"],["std::cmp::Comparable"," Types that have a total order.","/std/cmp/Comparable.html"],["std::cmp::Ordering"," Result of comparing two values.","/std/cmp/Ordering.html"],["std::cmp::lexicographic_cmp"," Helper macro for implementing a lexicographic order.","/std/cmp/lexicographic_cmp.html"],["std::cmp::Comparable::compare"," Compare the value","/std/cmp/Comparable.html#item.compare"],["std::cmp::Comparable::less_than"," Returns `true` if `lhs` is strictly less than `rhs`, `false` otherwise","/std/cmp/Comparable.html#item.less_than"],["std::cmp::Comparable::less_than_or_equal"," Returns `true` if `lhs` is less or equal to `rhs`, `false` otherwise","/std/cmp/Comparable.html#item.less_than_or_equal"],["std::cmp::Comparable::greater_than"," Returns `true` if `lhs` strictly greater than `rhs`, `false` otherwise","/std/cmp/Comparable.html#item.greater_than"],["std::cmp::Comparable::greater_than_or_equal"," Returns `true` if `lhs` greater than or equal `rhs`, `false` otherwise","/std/cmp/Comparable.html#item.greater_than_or_equal"],["std::cmp::Equatable::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/cmp/Equatable.html#item.equals"],["std::cmp::Equatable::not_equals"," Returns `false` if arguments are equal, `true` otherwise","/std/cmp/Equatable.html#item.not_equals"],["std::cmp::Ordering::Less","","/std/cmp/Ordering.html#item.Less"],["std::cmp::Ordering::Equal","","/std/cmp/Ordering.html#item.Equal"],["std::cmp::Ordering::Greater","","/std/cmp/Ordering.html#item.Greater"],["std::cmp::internal::operator_eq","","/std/cmp/internal.html#item.operator_eq"],["std::cmp::internal::operator_neq","","/std/cmp/internal.html#item.operator_neq"],["std::cmp::internal::operator_lt","","/std/cmp/internal.html#item.operator_lt"],["std::cmp::internal::operator_lte","","/std/cmp/internal.html#item.operator_lte"],["std::cmp::internal::operator_gt","","/std/cmp/internal.html#item.operator_gt"],["std::cmp::internal::operator_gte","","/std/cmp/internal.html#item.operator_gte"],["std::collections::hashmap","","/std/collections/hashmap.html"],["std::collections::hashset","","/std/collections/hashset.html"],["std::collections::vector","","/std/collections/vector.html"],["std::collections::tests","","/std/collections/tests.html"],["std::collections::free_all"," Helper for collections that own heap-allocated objects. This is used to","/std/collections.html#item.free_all"],["std::collections::sort_by"," Sorts a slice using a key extraction function.","/std/collections.html#item.sort_by"],["std::collections::sort"," Sorts a slice.","/std/collections.html#item.sort"],["std::collections::partition_by","","/std/collections.html#item.partition_by"],["std::collections::HashSet","","/std/collections/HashSet.html"],["std::collections::Vector"," Growable heap-allocated array.","/std/collections/Vector.html"],["std::collections::HashMap"," A simple linear probing hash table.","/std/collections/HashMap.html"],["std::collections::HashMap::new"," Creates an empty hash map","/std/collections/HashMap.html#item.new"],["std::collections::HashMap::with_capacity"," Creates an empty hash map that can store up to `capacity` items without","/std/collections/HashMap.html#item.with_capacity"],["std::collections::HashMap::with_size"," Creates a hashmap with a specific number of buckets.","/std/collections/HashMap.html#item.with_size"],["std::collections::HashMap::reserve"," Reserves space for at least `additional` more elements to be inserted without","/std/collections/HashMap.html#item.reserve"],["std::collections::HashMap::rehash"," Resizes the underlying array to exactly the given `new_capacity`.","/std/collections/HashMap.html#item.rehash"],["std::collections::HashMap::shrink_to_fit"," Reduces the size of underlying storage to fit the contained elements if needed.","/std/collections/HashMap.html#item.shrink_to_fit"],["std::collections::HashMap::insert"," Inserts a value into the map under a given key.","/std/collections/HashMap.html#item.insert"],["std::collections::HashMap::get"," Retreives the value by given key.","/std/collections/HashMap.html#item.get"],["std::collections::HashMap::get_ref"," Retreives a pointer to the value by given key.","/std/collections/HashMap.html#item.get_ref"],["std::collections::HashMap::get_mut"," Retreives a mutable pointer to the value by given key.","/std/collections/HashMap.html#item.get_mut"],["std::collections::HashMap::remove"," Removes the element from the map.","/std/collections/HashMap.html#item.remove"],["std::collections::HashMap::len"," Returns the number of elements in the map.","/std/collections/HashMap.html#item.len"],["std::collections::HashMap::empty"," Returns `true` if the map is empty, `false` otherwise.","/std/collections/HashMap.html#item.empty"],["std::collections::HashMap::clear"," Removes all elements from the array.","/std/collections/HashMap.html#item.clear"],["std::collections::HashMap::iter"," Returns an iterator over the elements of the array.","/std/collections/HashMap.html#item.iter"],["std::collections::HashMap::iter_ref"," Returns an iterator of pointers to elements of the array.","/std/collections/HashMap.html#item.iter_ref"],["std::collections::HashMap::iter_mut"," Returns an iterator of mutable pointers to elements of the array.","/std/collections/HashMap.html#item.iter_mut"],["std::collections::HashMap::_insert","","/std/collections/HashMap.html#item._insert"],["std::collections::HashMap::_get_slot","","/std/collections/HashMap.html#item._get_slot"],["std::collections::HashMap::free"," Frees the memory backing the object.","/std/collections/HashMap.html#item.free"],["std::collections::HashMap::move"," Creates a copy of the object, leaving an inert object behind.","/std/collections/HashMap.html#item.move"],["std::collections::HashMap::clone","","/std/collections/HashMap.html#item.clone"],["std::collections::HashMap::from_iter"," Creates a hash map from an iterator of key-value pairs","/std/collections/HashMap.html#item.from_iter"],["std::collections::HashMap::extend"," Inserts additional elements into the map from an iterator","/std/collections/HashMap.html#item.extend"],["std::collections::HashSet::new","","/std/collections/HashSet.html#item.new"],["std::collections::HashSet::with_capacity","","/std/collections/HashSet.html#item.with_capacity"],["std::collections::HashSet::with_size","","/std/collections/HashSet.html#item.with_size"],["std::collections::HashSet::reserve","","/std/collections/HashSet.html#item.reserve"],["std::collections::HashSet::rehash","","/std/collections/HashSet.html#item.rehash"],["std::collections::HashSet::shrink_to_fit","","/std/collections/HashSet.html#item.shrink_to_fit"],["std::collections::HashSet::insert","","/std/collections/HashSet.html#item.insert"],["std::collections::HashSet::remove","","/std/collections/HashSet.html#item.remove"],["std::collections::HashSet::contains","","/std/collections/HashSet.html#item.contains"],["std::collections::HashSet::len","","/std/collections/HashSet.html#item.len"],["std::collections::HashSet::empty","","/std/collections/HashSet.html#item.empty"],["std::collections::HashSet::clear","","/std/collections/HashSet.html#item.clear"],["std::collections::HashSet::iter","","/std/collections/HashSet.html#item.iter"],["std::collections::HashSet::iter_ref","","/std/collections/HashSet.html#item.iter_ref"],["std::collections::HashSet::free","","/std/collections/HashSet.html#item.free"],["std::collections::HashSet::move","","/std/collections/HashSet.html#item.move"],["std::collections::HashSet::clone","","/std/collections/HashSet.html#item.clone"],["std::collections::HashSet::from_iter","","/std/collections/HashSet.html#item.from_iter"],["std::collections::HashSet::extend","","/std/collections/HashSet.html#item.extend"],["std::collections::Vector::new"," Create an empty vector","/std/collections/Vector.html#item.new"],["std::collections::Vector::from_raw"," Create a vector from a raw slice and a length.","/std/collections/Vector.html#item.from_raw"],["std::collections::Vector::with_capacity"," Create a vector that can hold up to `capacity` elements without reallocating.","/std/collections/Vector.html#item.with_capacity"],["std::collections::Vector::from_slice"," Create a vector from a slice, copying the elements.","/std/collections/Vector.html#item.from_slice"],["std::collections::Vector::from_iter"," Create a vector from an iterator.","/std/collections/Vector.html#item.from_iter"],["std::collections::Vector::reserve"," Reserve capacity for at least `additional` elements.","/std/collections/Vector.html#item.reserve"],["std::collections::Vector::extend_from_slice"," Extend the vector with the elements from a slice.","/std/collections/Vector.html#item.extend_from_slice"],["std::collections::Vector::extend"," Extend the vector with the elements from an iterator.","/std/collections/Vector.html#item.extend"],["std::collections::Vector::insert"," Insert an element at the given index, shifting all elements after it.","/std/collections/Vector.html#item.insert"],["std::collections::Vector::get"," Get the element at the given index.","/std/collections/Vector.html#item.get"],["std::collections::Vector::as_slice"," View the vector as a slice.","/std/collections/Vector.html#item.as_slice"],["std::collections::Vector::as_slice_mut"," View the vector as a mutable slice.","/std/collections/Vector.html#item.as_slice_mut"],["std::collections::Vector::push"," Push an element to the end of the vector.","/std/collections/Vector.html#item.push"],["std::collections::Vector::pop"," Pop an element from the end of the vector.","/std/collections/Vector.html#item.pop"],["std::collections::Vector::remove"," Remove an element at the given index, shifting all elements after it.","/std/collections/Vector.html#item.remove"],["std::collections::Vector::len"," Return the length of the vector.","/std/collections/Vector.html#item.len"],["std::collections::Vector::capacity"," Return the size of the underlying buffer.","/std/collections/Vector.html#item.capacity"],["std::collections::Vector::spare_capacity"," Returns a region of memory \"after the last element\".","/std/collections/Vector.html#item.spare_capacity"],["std::collections::Vector::empty"," Returns `true` if the vector is empty, `false` otherwise.","/std/collections/Vector.html#item.empty"],["std::collections::Vector::clear"," Clear the vector, removing all elements.","/std/collections/Vector.html#item.clear"],["std::collections::Vector::resize"," Truncate the vector, removing all but the first `new_size` elements.","/std/collections/Vector.html#item.resize"],["std::collections::Vector::iter"," Returns an iterator over the vector.","/std/collections/Vector.html#item.iter"],["std::collections::Vector::iter_ref"," Returns an iterator over the pointers to the elements.","/std/collections/Vector.html#item.iter_ref"],["std::collections::Vector::iter_mut"," Returns an iterator over the mutable pointers to the elements.","/std/collections/Vector.html#item.iter_mut"],["std::collections::Vector::shrink_to_fit"," Shrink the underlying buffer to the length of the vector.","/std/collections/Vector.html#item.shrink_to_fit"],["std::collections::Vector::free"," Frees the memory backing the object.","/std/collections/Vector.html#item.free"],["std::collections::Vector::move"," Creates a copy of the object, leaving an inert object behind.","/std/collections/Vector.html#item.move"],["std::collections::Vector::clone"," Create a shallow copy of the vector.","/std/collections/Vector.html#item.clone"],["std::collections::Vector::write_str"," Write a string","/std/collections/Vector.html#item.write_str"],["std::collections::Vector::write_char"," Write a single character","/std/collections/Vector.html#item.write_char"],["std::collections::Vector::fmt"," Write the object into a given formatter.","/std/collections/Vector.html#item.fmt"],["std::collections::hashmap::tests","","/std/collections/hashmap/tests.html"],["std::collections::hashmap::HashMap"," A simple linear probing hash table.","/std/collections/hashmap/HashMap.html"],["std::collections::hashmap::HashItem","","/std/collections/hashmap/HashItem.html"],["std::collections::hashmap::HashMapRefIterator","","/std/collections/hashmap/HashMapRefIterator.html"],["std::collections::hashmap::HashMapMutIterator","","/std/collections/hashmap/HashMapMutIterator.html"],["std::collections::hashmap::HashMapIterator","","/std/collections/hashmap/HashMapIterator.html"],["std::collections::hashmap::State","","/std/collections/hashmap/State.html"],["std::collections::hashmap::INITIAL_SIZE","","/std/collections/hashmap.html#item.INITIAL_SIZE"],["std::collections::hashmap::HashMap::new"," Creates an empty hash map","/std/collections/hashmap/HashMap.html#item.new"],["std::collections::hashmap::HashMap::with_capacity"," Creates an empty hash map that can store up to `capacity` items without","/std/collections/hashmap/HashMap.html#item.with_capacity"],["std::collections::hashmap::HashMap::with_size"," Creates a hashmap with a specific number of buckets.","/std/collections/hashmap/HashMap.html#item.with_size"],["std::collections::hashmap::HashMap::reserve"," Reserves space for at least `additional` more elements to be inserted without","/std/collections/hashmap/HashMap.html#item.reserve"],["std::collections::hashmap::HashMap::rehash"," Resizes the underlying array to exactly the given `new_capacity`.","/std/collections/hashmap/HashMap.html#item.rehash"],["std::collections::hashmap::HashMap::shrink_to_fit"," Reduces the size of underlying storage to fit the contained elements if needed.","/std/collections/hashmap/HashMap.html#item.shrink_to_fit"],["std::collections::hashmap::HashMap::insert"," Inserts a value into the map under a given key.","/std/collections/hashmap/HashMap.html#item.insert"],["std::collections::hashmap::HashMap::get"," Retreives the value by given key.","/std/collections/hashmap/HashMap.html#item.get"],["std::collections::hashmap::HashMap::get_ref"," Retreives a pointer to the value by given key.","/std/collections/hashmap/HashMap.html#item.get_ref"],["std::collections::hashmap::HashMap::get_mut"," Retreives a mutable pointer to the value by given key.","/std/collections/hashmap/HashMap.html#item.get_mut"],["std::collections::hashmap::HashMap::remove"," Removes the element from the map.","/std/collections/hashmap/HashMap.html#item.remove"],["std::collections::hashmap::HashMap::len"," Returns the number of elements in the map.","/std/collections/hashmap/HashMap.html#item.len"],["std::collections::hashmap::HashMap::empty"," Returns `true` if the map is empty, `false` otherwise.","/std/collections/hashmap/HashMap.html#item.empty"],["std::collections::hashmap::HashMap::clear"," Removes all elements from the array.","/std/collections/hashmap/HashMap.html#item.clear"],["std::collections::hashmap::HashMap::iter"," Returns an iterator over the elements of the array.","/std/collections/hashmap/HashMap.html#item.iter"],["std::collections::hashmap::HashMap::iter_ref"," Returns an iterator of pointers to elements of the array.","/std/collections/hashmap/HashMap.html#item.iter_ref"],["std::collections::hashmap::HashMap::iter_mut"," Returns an iterator of mutable pointers to elements of the array.","/std/collections/hashmap/HashMap.html#item.iter_mut"],["std::collections::hashmap::HashMap::_insert","","/std/collections/hashmap/HashMap.html#item._insert"],["std::collections::hashmap::HashMap::_get_slot","","/std/collections/hashmap/HashMap.html#item._get_slot"],["std::collections::hashmap::HashMap::free"," Frees the memory backing the object.","/std/collections/hashmap/HashMap.html#item.free"],["std::collections::hashmap::HashMap::move"," Creates a copy of the object, leaving an inert object behind.","/std/collections/hashmap/HashMap.html#item.move"],["std::collections::hashmap::HashMap::clone","","/std/collections/hashmap/HashMap.html#item.clone"],["std::collections::hashmap::HashMap::from_iter"," Creates a hash map from an iterator of key-value pairs","/std/collections/hashmap/HashMap.html#item.from_iter"],["std::collections::hashmap::HashMap::extend"," Inserts additional elements into the map from an iterator","/std/collections/hashmap/HashMap.html#item.extend"],["std::collections::hashmap::HashMapIterator::next"," Returns the next item, if any.","/std/collections/hashmap/HashMapIterator.html#item.next"],["std::collections::hashmap::HashMapIterator::next_back"," Returns the next item from the back, if any.","/std/collections/hashmap/HashMapIterator.html#item.next_back"],["std::collections::hashmap::HashMapMutIterator::next"," Returns the next item, if any.","/std/collections/hashmap/HashMapMutIterator.html#item.next"],["std::collections::hashmap::HashMapMutIterator::next_back"," Returns the next item from the back, if any.","/std/collections/hashmap/HashMapMutIterator.html#item.next_back"],["std::collections::hashmap::HashMapRefIterator::next"," Returns the next item, if any.","/std/collections/hashmap/HashMapRefIterator.html#item.next"],["std::collections::hashmap::HashMapRefIterator::next_back"," Returns the next item from the back, if any.","/std/collections/hashmap/HashMapRefIterator.html#item.next_back"],["std::collections::hashmap::State::Vacant","","/std/collections/hashmap/State.html#item.Vacant"],["std::collections::hashmap::State::Occupied","","/std/collections/hashmap/State.html#item.Occupied"],["std::collections::hashmap::State::Deleted","","/std/collections/hashmap/State.html#item.Deleted"],["std::collections::hashmap::tests::test_hashmap_new","","/std/collections/hashmap/tests.html#item.test_hashmap_new"],["std::collections::hashmap::tests::test_hashmap_insert","","/std/collections/hashmap/tests.html#item.test_hashmap_insert"],["std::collections::hashmap::tests::test_hashmap_get","","/std/collections/hashmap/tests.html#item.test_hashmap_get"],["std::collections::hashmap::tests::test_hashmap_get_mut","","/std/collections/hashmap/tests.html#item.test_hashmap_get_mut"],["std::collections::hashmap::tests::test_hashmap_remove","","/std/collections/hashmap/tests.html#item.test_hashmap_remove"],["std::collections::hashmap::tests::test_hashmap_len","","/std/collections/hashmap/tests.html#item.test_hashmap_len"],["std::collections::hashmap::tests::test_hashmap_empty","","/std/collections/hashmap/tests.html#item.test_hashmap_empty"],["std::collections::hashmap::tests::test_hashmap_clear","","/std/collections/hashmap/tests.html#item.test_hashmap_clear"],["std::collections::hashmap::tests::test_hashmap_iter","","/std/collections/hashmap/tests.html#item.test_hashmap_iter"],["std::collections::hashmap::tests::test_hashmap_iter_ref","","/std/collections/hashmap/tests.html#item.test_hashmap_iter_ref"],["std::collections::hashmap::tests::test_hashmap_iter_mut","","/std/collections/hashmap/tests.html#item.test_hashmap_iter_mut"],["std::collections::hashmap::tests::test_reserve","","/std/collections/hashmap/tests.html#item.test_reserve"],["std::collections::hashmap::tests::test_hashmap_from_iter","","/std/collections/hashmap/tests.html#item.test_hashmap_from_iter"],["std::collections::hashmap::tests::test_hashmap_extend","","/std/collections/hashmap/tests.html#item.test_hashmap_extend"],["std::collections::hashmap::tests::test_hashmap_move","","/std/collections/hashmap/tests.html#item.test_hashmap_move"],["std::collections::hashmap::tests::DummyHasher","","/std/collections/hashmap/tests/DummyHasher.html"],["std::collections::hashmap::tests::DummyHasher::new","","/std/collections/hashmap/tests/DummyHasher.html#item.new"],["std::collections::hashmap::tests::DummyHasher::write","","/std/collections/hashmap/tests/DummyHasher.html#item.write"],["std::collections::hashmap::tests::DummyHasher::finish","","/std/collections/hashmap/tests/DummyHasher.html#item.finish"],["std::collections::hashset::tests","","/std/collections/hashset/tests.html"],["std::collections::hashset::HashSet","","/std/collections/hashset/HashSet.html"],["std::collections::hashset::HashSetIterator","","/std/collections/hashset/HashSetIterator.html"],["std::collections::hashset::HashSetRefIterator","","/std/collections/hashset/HashSetRefIterator.html"],["std::collections::hashset::HashSet::new","","/std/collections/hashset/HashSet.html#item.new"],["std::collections::hashset::HashSet::with_capacity","","/std/collections/hashset/HashSet.html#item.with_capacity"],["std::collections::hashset::HashSet::with_size","","/std/collections/hashset/HashSet.html#item.with_size"],["std::collections::hashset::HashSet::reserve","","/std/collections/hashset/HashSet.html#item.reserve"],["std::collections::hashset::HashSet::rehash","","/std/collections/hashset/HashSet.html#item.rehash"],["std::collections::hashset::HashSet::shrink_to_fit","","/std/collections/hashset/HashSet.html#item.shrink_to_fit"],["std::collections::hashset::HashSet::insert","","/std/collections/hashset/HashSet.html#item.insert"],["std::collections::hashset::HashSet::remove","","/std/collections/hashset/HashSet.html#item.remove"],["std::collections::hashset::HashSet::contains","","/std/collections/hashset/HashSet.html#item.contains"],["std::collections::hashset::HashSet::len","","/std/collections/hashset/HashSet.html#item.len"],["std::collections::hashset::HashSet::empty","","/std/collections/hashset/HashSet.html#item.empty"],["std::collections::hashset::HashSet::clear","","/std/collections/hashset/HashSet.html#item.clear"],["std::collections::hashset::HashSet::iter","","/std/collections/hashset/HashSet.html#item.iter"],["std::collections::hashset::HashSet::iter_ref","","/std/collections/hashset/HashSet.html#item.iter_ref"],["std::collections::hashset::HashSet::free","","/std/collections/hashset/HashSet.html#item.free"],["std::collections::hashset::HashSet::move","","/std/collections/hashset/HashSet.html#item.move"],["std::collections::hashset::HashSet::clone","","/std/collections/hashset/HashSet.html#item.clone"],["std::collections::hashset::HashSet::from_iter","","/std/collections/hashset/HashSet.html#item.from_iter"],["std::collections::hashset::HashSet::extend","","/std/collections/hashset/HashSet.html#item.extend"],["std::collections::hashset::HashSetIterator::next","","/std/collections/hashset/HashSetIterator.html#item.next"],["std::collections::hashset::HashSetIterator::next_back","","/std/collections/hashset/HashSetIterator.html#item.next_back"],["std::collections::hashset::HashSetRefIterator::next","","/std/collections/hashset/HashSetRefIterator.html#item.next"],["std::collections::hashset::HashSetRefIterator::next_back","","/std/collections/hashset/HashSetRefIterator.html#item.next_back"],["std::collections::hashset::tests::test_hashset_new","","/std/collections/hashset/tests.html#item.test_hashset_new"],["std::collections::hashset::tests::test_hashset_with_capacity","","/std/collections/hashset/tests.html#item.test_hashset_with_capacity"],["std::collections::hashset::tests::test_hashset_insert","","/std/collections/hashset/tests.html#item.test_hashset_insert"],["std::collections::hashset::tests::test_hashset_remove","","/std/collections/hashset/tests.html#item.test_hashset_remove"],["std::collections::hashset::tests::test_hashset_contains","","/std/collections/hashset/tests.html#item.test_hashset_contains"],["std::collections::hashset::tests::test_hashset_len","","/std/collections/hashset/tests.html#item.test_hashset_len"],["std::collections::hashset::tests::test_hashset_empty","","/std/collections/hashset/tests.html#item.test_hashset_empty"],["std::collections::hashset::tests::test_hashset_clear","","/std/collections/hashset/tests.html#item.test_hashset_clear"],["std::collections::hashset::tests::test_hashset_iter","","/std/collections/hashset/tests.html#item.test_hashset_iter"],["std::collections::hashset::tests::test_hashset_iter_ref","","/std/collections/hashset/tests.html#item.test_hashset_iter_ref"],["std::collections::hashset::tests::test_hashset_move","","/std/collections/hashset/tests.html#item.test_hashset_move"],["std::collections::hashset::tests::test_hashset_from_iter","","/std/collections/hashset/tests.html#item.test_hashset_from_iter"],["std::collections::hashset::tests::test_hashset_extend","","/std/collections/hashset/tests.html#item.test_hashset_extend"],["std::collections::tests::test_sort","","/std/collections/tests.html#item.test_sort"],["std::collections::tests::test_sort_by","","/std/collections/tests.html#item.test_sort_by"],["std::collections::vector::tests","","/std/collections/vector/tests.html"],["std::collections::vector::Vector"," Growable heap-allocated array.","/std/collections/vector/Vector.html"],["std::collections::vector::Vector::new"," Create an empty vector","/std/collections/vector/Vector.html#item.new"],["std::collections::vector::Vector::from_raw"," Create a vector from a raw slice and a length.","/std/collections/vector/Vector.html#item.from_raw"],["std::collections::vector::Vector::with_capacity"," Create a vector that can hold up to `capacity` elements without reallocating.","/std/collections/vector/Vector.html#item.with_capacity"],["std::collections::vector::Vector::from_slice"," Create a vector from a slice, copying the elements.","/std/collections/vector/Vector.html#item.from_slice"],["std::collections::vector::Vector::from_iter"," Create a vector from an iterator.","/std/collections/vector/Vector.html#item.from_iter"],["std::collections::vector::Vector::reserve"," Reserve capacity for at least `additional` elements.","/std/collections/vector/Vector.html#item.reserve"],["std::collections::vector::Vector::extend_from_slice"," Extend the vector with the elements from a slice.","/std/collections/vector/Vector.html#item.extend_from_slice"],["std::collections::vector::Vector::extend"," Extend the vector with the elements from an iterator.","/std/collections/vector/Vector.html#item.extend"],["std::collections::vector::Vector::insert"," Insert an element at the given index, shifting all elements after it.","/std/collections/vector/Vector.html#item.insert"],["std::collections::vector::Vector::get"," Get the element at the given index.","/std/collections/vector/Vector.html#item.get"],["std::collections::vector::Vector::as_slice"," View the vector as a slice.","/std/collections/vector/Vector.html#item.as_slice"],["std::collections::vector::Vector::as_slice_mut"," View the vector as a mutable slice.","/std/collections/vector/Vector.html#item.as_slice_mut"],["std::collections::vector::Vector::push"," Push an element to the end of the vector.","/std/collections/vector/Vector.html#item.push"],["std::collections::vector::Vector::pop"," Pop an element from the end of the vector.","/std/collections/vector/Vector.html#item.pop"],["std::collections::vector::Vector::remove"," Remove an element at the given index, shifting all elements after it.","/std/collections/vector/Vector.html#item.remove"],["std::collections::vector::Vector::len"," Return the length of the vector.","/std/collections/vector/Vector.html#item.len"],["std::collections::vector::Vector::capacity"," Return the size of the underlying buffer.","/std/collections/vector/Vector.html#item.capacity"],["std::collections::vector::Vector::spare_capacity"," Returns a region of memory \"after the last element\".","/std/collections/vector/Vector.html#item.spare_capacity"],["std::collections::vector::Vector::empty"," Returns `true` if the vector is empty, `false` otherwise.","/std/collections/vector/Vector.html#item.empty"],["std::collections::vector::Vector::clear"," Clear the vector, removing all elements.","/std/collections/vector/Vector.html#item.clear"],["std::collections::vector::Vector::resize"," Truncate the vector, removing all but the first `new_size` elements.","/std/collections/vector/Vector.html#item.resize"],["std::collections::vector::Vector::iter"," Returns an iterator over the vector.","/std/collections/vector/Vector.html#item.iter"],["std::collections::vector::Vector::iter_ref"," Returns an iterator over the pointers to the elements.","/std/collections/vector/Vector.html#item.iter_ref"],["std::collections::vector::Vector::iter_mut"," Returns an iterator over the mutable pointers to the elements.","/std/collections/vector/Vector.html#item.iter_mut"],["std::collections::vector::Vector::shrink_to_fit"," Shrink the underlying buffer to the length of the vector.","/std/collections/vector/Vector.html#item.shrink_to_fit"],["std::collections::vector::Vector::free"," Frees the memory backing the object.","/std/collections/vector/Vector.html#item.free"],["std::collections::vector::Vector::move"," Creates a copy of the object, leaving an inert object behind.","/std/collections/vector/Vector.html#item.move"],["std::collections::vector::Vector::clone"," Create a shallow copy of the vector.","/std/collections/vector/Vector.html#item.clone"],["std::collections::vector::Vector::write_str"," Write a string","/std/collections/vector/Vector.html#item.write_str"],["std::collections::vector::Vector::write_char"," Write a single character","/std/collections/vector/Vector.html#item.write_char"],["std::collections::vector::Vector::fmt"," Write the object into a given formatter.","/std/collections/vector/Vector.html#item.fmt"],["std::collections::vector::tests::test_vector_new","","/std/collections/vector/tests.html#item.test_vector_new"],["std::collections::vector::tests::test_vector_from_slice","","/std/collections/vector/tests.html#item.test_vector_from_slice"],["std::collections::vector::tests::test_vector_from_iter","","/std/collections/vector/tests.html#item.test_vector_from_iter"],["std::collections::vector::tests::test_vector_reserve","","/std/collections/vector/tests.html#item.test_vector_reserve"],["std::collections::vector::tests::test_vector_extend_from_slice","","/std/collections/vector/tests.html#item.test_vector_extend_from_slice"],["std::collections::vector::tests::test_vector_extend","","/std/collections/vector/tests.html#item.test_vector_extend"],["std::collections::vector::tests::test_vector_insert","","/std/collections/vector/tests.html#item.test_vector_insert"],["std::collections::vector::tests::test_vector_as_slice","","/std/collections/vector/tests.html#item.test_vector_as_slice"],["std::collections::vector::tests::test_vector_as_slice_mut","","/std/collections/vector/tests.html#item.test_vector_as_slice_mut"],["std::collections::vector::tests::test_vector_push","","/std/collections/vector/tests.html#item.test_vector_push"],["std::collections::vector::tests::test_vector_pop","","/std/collections/vector/tests.html#item.test_vector_pop"],["std::collections::vector::tests::test_vector_remove","","/std/collections/vector/tests.html#item.test_vector_remove"],["std::collections::vector::tests::test_vector_clear","","/std/collections/vector/tests.html#item.test_vector_clear"],["std::collections::vector::tests::test_vector_get","","/std/collections/vector/tests.html#item.test_vector_get"],["std::collections::vector::tests::test_vector_move","","/std/collections/vector/tests.html#item.test_vector_move"],["std::collections::vector::tests::test_iter_ref","","/std/collections/vector/tests.html#item.test_iter_ref"],["std::collections::vector::tests::test_iter_mut","","/std/collections/vector/tests.html#item.test_iter_mut"],["std::ffi::CString","","/std/ffi/CString.html"],["std::ffi::c_str"," Compile-time null-terminated string.","/std/ffi/c_str.html"],["std::ffi::CString::new","","/std/ffi/CString.html#item.new"],["std::ffi::CString::from_raw","","/std/ffi/CString.html#item.from_raw"],["std::ffi::CString::null","","/std/ffi/CString.html#item.null"],["std::ffi::CString::len","","/std/ffi/CString.html#item.len"],["std::ffi::CString::as_slice","","/std/ffi/CString.html#item.as_slice"],["std::ffi::CString::free","","/std/ffi/CString.html#item.free"],["std::ffi::CString::move","","/std/ffi/CString.html#item.move"],["std::fmt::internal","","/std/fmt/internal.html"],["std::fmt::tests","","/std/fmt/tests.html"],["std::fmt::hex"," Write value as a hexadecimal number","/std/fmt.html#item.hex"],["std::fmt::bin"," Write value as a binary number","/std/fmt.html#item.bin"],["std::fmt::oct"," Write value as an octal number","/std/fmt.html#item.oct"],["std::fmt::zero_pad"," Pads number with zeros on the left.","/std/fmt.html#item.zero_pad"],["std::fmt::precision","","/std/fmt.html#item.precision"],["std::fmt::repeat"," Repeats value `times` times.","/std/fmt.html#item.repeat"],["std::fmt::pad_with"," Pads arbitrary formattable value on the left with a specified character.","/std/fmt.html#item.pad_with"],["std::fmt::Error"," Error that can occur during a string formatting operation.","/std/fmt/Error.html"],["std::fmt::SliceFormatter"," Formatter that writes into a string slice.","/std/fmt/SliceFormatter.html"],["std::fmt::Formatter"," A sink for string formatting operations","/std/fmt/Formatter.html"],["std::fmt::Formattable"," Types that can be formatted. This is the standard way to implement custom","/std/fmt/Formattable.html"],["std::fmt::Result","","/std/fmt.html#item.Result"],["std::fmt::write"," Write a formatted string into a given formatter.","/std/fmt/write.html"],["std::fmt::writeln"," Write a formatted string and a newline into a given formatter.","/std/fmt/writeln.html"],["std::fmt::format"," Format a string into a `StringBuf`.","/std/fmt/format.html"],["std::fmt::format_in"," Format a string into a preexisting buffer.","/std/fmt/format_in.html"],["std::fmt::Error::new","","/std/fmt/Error.html#item.new"],["std::fmt::Error::fmt"," Write the object into a given formatter.","/std/fmt/Error.html#item.fmt"],["std::fmt::Error::from","","/std/fmt/Error.html#item.from"],["std::fmt::Formattable::fmt"," Write the object into a given formatter.","/std/fmt/Formattable.html#item.fmt"],["std::fmt::Formatter::write_str"," Write a string","/std/fmt/Formatter.html#item.write_str"],["std::fmt::Formatter::write_char"," Write a single character","/std/fmt/Formatter.html#item.write_char"],["std::fmt::SliceFormatter::new","","/std/fmt/SliceFormatter.html#item.new"],["std::fmt::SliceFormatter::write_str"," Write a string","/std/fmt/SliceFormatter.html#item.write_str"],["std::fmt::SliceFormatter::write_char"," Write a single character","/std/fmt/SliceFormatter.html#item.write_char"],["std::fmt::SliceFormatter::get"," Get the resulting string","/std/fmt/SliceFormatter.html#item.get"],["std::fmt::internal::format_integer","","/std/fmt/internal.html#item.format_integer"],["std::fmt::internal::format_float","","/std/fmt/internal.html#item.format_float"],["std::fmt::internal::printf","","/std/fmt/internal.html#item.printf"],["std::fmt::internal::NullFormatter","","/std/fmt/internal/NullFormatter.html"],["std::fmt::internal::FormatArg"," Type-erased wrapper of a formattable object","/std/fmt/internal/FormatArg.html"],["std::fmt::internal::NumFormatAdapter","","/std/fmt/internal/NumFormatAdapter.html"],["std::fmt::internal::FloatFormatAdapter","","/std/fmt/internal/FloatFormatAdapter.html"],["std::fmt::internal::RepeatAdapter","","/std/fmt/internal/RepeatAdapter.html"],["std::fmt::internal::GenericPadAdapter","","/std/fmt/internal/GenericPadAdapter.html"],["std::fmt::internal::State","","/std/fmt/internal/State.html"],["std::fmt::internal::FloatFormatAdapter::fmt","","/std/fmt/internal/FloatFormatAdapter.html#item.fmt"],["std::fmt::internal::FormatArg::new","","/std/fmt/internal/FormatArg.html#item.new"],["std::fmt::internal::FormatArg::fmt","","/std/fmt/internal/FormatArg.html#item.fmt"],["std::fmt::internal::GenericPadAdapter::fmt","","/std/fmt/internal/GenericPadAdapter.html#item.fmt"],["std::fmt::internal::NullFormatter::write_str","","/std/fmt/internal/NullFormatter.html#item.write_str"],["std::fmt::internal::NullFormatter::write_char","","/std/fmt/internal/NullFormatter.html#item.write_char"],["std::fmt::internal::NumFormatAdapter::fmt","","/std/fmt/internal/NumFormatAdapter.html#item.fmt"],["std::fmt::internal::NumFormatAdapter::hex","","/std/fmt/internal/NumFormatAdapter.html#item.hex"],["std::fmt::internal::NumFormatAdapter::oct","","/std/fmt/internal/NumFormatAdapter.html#item.oct"],["std::fmt::internal::NumFormatAdapter::bin","","/std/fmt/internal/NumFormatAdapter.html#item.bin"],["std::fmt::internal::NumFormatAdapter::zero_pad","","/std/fmt/internal/NumFormatAdapter.html#item.zero_pad"],["std::fmt::internal::RepeatAdapter::fmt","","/std/fmt/internal/RepeatAdapter.html#item.fmt"],["std::fmt::internal::State::NORMAL","","/std/fmt/internal/State.html#item.NORMAL"],["std::fmt::internal::State::BRACE_OPEN","","/std/fmt/internal/State.html#item.BRACE_OPEN"],["std::fmt::internal::State::BRACE_CLOSE","","/std/fmt/internal/State.html#item.BRACE_CLOSE"],["std::fmt::tests::test_format_integer","","/std/fmt/tests.html#item.test_format_integer"],["std::fmt::tests::test_format_radix","","/std/fmt/tests.html#item.test_format_radix"],["std::fmt::tests::test_format_zero_pad","","/std/fmt/tests.html#item.test_format_zero_pad"],["std::fmt::tests::test_format_radix_and_pad","","/std/fmt/tests.html#item.test_format_radix_and_pad"],["std::fmt::tests::test_format_repeat","","/std/fmt/tests.html#item.test_format_repeat"],["std::fmt::tests::test_format_float","","/std/fmt/tests.html#item.test_format_float"],["std::fmt::tests::fmt","","/std/fmt/tests/fmt.html"],["std::fmt::tests::BUF","","/std/fmt/tests.html#item.BUF"],["std::fs::unix","","/std/fs/unix.html"],["std::fs::tests","","/std/fs/tests.html"],["std::fs::create_directory"," Create a new directory","/std/fs.html#item.create_directory"],["std::fs::remove_file"," Remove a file","/std/fs.html#item.remove_file"],["std::fs::remove_directory"," Remove an empty directory","/std/fs.html#item.remove_directory"],["std::fs::read_directory"," Returns iterator over the items in a directory.","/std/fs.html#item.read_directory"],["std::fs::OpenOptions"," Options for how the file should be opened.","/std/fs/OpenOptions.html"],["std::fs::PathSegment","","/std/fs/PathSegment.html"],["std::fs::PathIterator","","/std/fs/PathIterator.html"],["std::fs::Path","","/std/fs/Path.html"],["std::fs::DirBuilder"," Utility for creating directories.","/std/fs/DirBuilder.html"],["std::fs::File","","/std/fs/File.html"],["std::fs::PathBuf","","/std/fs/PathBuf.html"],["std::fs::DirIterator"," Iterator over the items in a directory","/std/fs/DirIterator.html"],["std::fs::DirEntry"," Directory entry","/std/fs/DirEntry.html"],["std::fs::FileAttr"," File attributes (`stat`)","/std/fs/FileAttr.html"],["std::fs::PathSegmentKind","","/std/fs/PathSegmentKind.html"],["std::fs::FileType"," Type of the file (regular file, symlink, directory, ...)","/std/fs/FileType.html"],["std::fs::DirBuilder::new","","/std/fs/DirBuilder.html#item.new"],["std::fs::DirBuilder::recursive"," Sets whether to create a recursive directory structure.","/std/fs/DirBuilder.html#item.recursive"],["std::fs::DirBuilder::mode"," Sets the mode for creation.","/std/fs/DirBuilder.html#item.mode"],["std::fs::DirBuilder::_mkdir","","/std/fs/DirBuilder.html#item._mkdir"],["std::fs::DirBuilder::create"," Create the directory (or directory tree) specified by `path`.","/std/fs/DirBuilder.html#item.create"],["std::fs::DirEntry::name"," Return the name of the item in directory","/std/fs/DirEntry.html#item.name"],["std::fs::DirEntry::file_type"," Returns the file type","/std/fs/DirEntry.html#item.file_type"],["std::fs::DirIterator::next"," Returns the next item, if any.","/std/fs/DirIterator.html#item.next"],["std::fs::DirIterator::close"," Closes the file descriptor associated with the iterator.","/std/fs/DirIterator.html#item.close"],["std::fs::File::open"," Opens file in read-only mode.","/std/fs/File.html#item.open"],["std::fs::File::create"," Creates a new file for writing (truncating it if it already exists).","/std/fs/File.html#item.create"],["std::fs::File::open_with"," Opens file with custom options.","/std/fs/File.html#item.open_with"],["std::fs::File::attributes"," Returns the file attributes (`stat`) for the file","/std/fs/File.html#item.attributes"],["std::fs::File::from_fd"," Create a file object from an existing file descriptor.","/std/fs/File.html#item.from_fd"],["std::fs::File::as_fd"," Get the file descriptor for the file.","/std/fs/File.html#item.as_fd"],["std::fs::File::read_to_string"," Read the entire file into a [std::string::StringBuf]","/std/fs/File.html#item.read_to_string"],["std::fs::File::seek","","/std/fs/File.html#item.seek"],["std::fs::File::flush","","/std/fs/File.html#item.flush"],["std::fs::File::sync","","/std/fs/File.html#item.sync"],["std::fs::File::close","","/std/fs/File.html#item.close"],["std::fs::File::move"," Creates a copy of the object, leaving an inert object behind.","/std/fs/File.html#item.move"],["std::fs::FileAttr::from_path","","/std/fs/FileAttr.html#item.from_path"],["std::fs::FileAttr::file_type","","/std/fs/FileAttr.html#item.file_type"],["std::fs::FileAttr::size","","/std/fs/FileAttr.html#item.size"],["std::fs::FileType::Fifo","","/std/fs/FileType.html#item.Fifo"],["std::fs::FileType::CharacterDevice","","/std/fs/FileType.html#item.CharacterDevice"],["std::fs::FileType::Directory","","/std/fs/FileType.html#item.Directory"],["std::fs::FileType::BlockDevice","","/std/fs/FileType.html#item.BlockDevice"],["std::fs::FileType::Regular","","/std/fs/FileType.html#item.Regular"],["std::fs::FileType::Link","","/std/fs/FileType.html#item.Link"],["std::fs::FileType::Socket","","/std/fs/FileType.html#item.Socket"],["std::fs::FileType::Unknown","","/std/fs/FileType.html#item.Unknown"],["std::fs::FileType::fmt","","/std/fs/FileType.html#item.fmt"],["std::fs::FileType::equals","","/std/fs/FileType.html#item.equals"],["std::fs::OpenOptions::new","","/std/fs/OpenOptions.html#item.new"],["std::fs::OpenOptions::read"," Sets the option for read access.","/std/fs/OpenOptions.html#item.read"],["std::fs::OpenOptions::write"," Sets the option for write access.","/std/fs/OpenOptions.html#item.write"],["std::fs::OpenOptions::append"," Sets the option for append access.","/std/fs/OpenOptions.html#item.append"],["std::fs::OpenOptions::truncate"," Sets the option for truncate access.","/std/fs/OpenOptions.html#item.truncate"],["std::fs::OpenOptions::create"," Sets the option for create access.","/std/fs/OpenOptions.html#item.create"],["std::fs::OpenOptions::create_new"," Sets the option for create new access.","/std/fs/OpenOptions.html#item.create_new"],["std::fs::OpenOptions::custom_flags"," Sets the custom flags.","/std/fs/OpenOptions.html#item.custom_flags"],["std::fs::OpenOptions::mode"," Sets the mode for creation.","/std/fs/OpenOptions.html#item.mode"],["std::fs::OpenOptions::get_access_mode","","/std/fs/OpenOptions.html#item.get_access_mode"],["std::fs::OpenOptions::get_creation_mode","","/std/fs/OpenOptions.html#item.get_creation_mode"],["std::fs::Path::new","","/std/fs/Path.html#item.new"],["std::fs::Path::iter","","/std/fs/Path.html#item.iter"],["std::fs::Path::as_slice","","/std/fs/Path.html#item.as_slice"],["std::fs::Path::is_absolute","","/std/fs/Path.html#item.is_absolute"],["std::fs::Path::is_relative","","/std/fs/Path.html#item.is_relative"],["std::fs::Path::parent","","/std/fs/Path.html#item.parent"],["std::fs::Path::strip_prefix","","/std/fs/Path.html#item.strip_prefix"],["std::fs::Path::starts_with","","/std/fs/Path.html#item.starts_with"],["std::fs::Path::fmt","","/std/fs/Path.html#item.fmt"],["std::fs::Path::equals","","/std/fs/Path.html#item.equals"],["std::fs::PathBuf::new","","/std/fs/PathBuf.html#item.new"],["std::fs::PathBuf::from_path","","/std/fs/PathBuf.html#item.from_path"],["std::fs::PathBuf::from_str","","/std/fs/PathBuf.html#item.from_str"],["std::fs::PathBuf::as_path","","/std/fs/PathBuf.html#item.as_path"],["std::fs::PathBuf::extend","","/std/fs/PathBuf.html#item.extend"],["std::fs::PathBuf::push","","/std/fs/PathBuf.html#item.push"],["std::fs::PathBuf::pop","","/std/fs/PathBuf.html#item.pop"],["std::fs::PathBuf::from_iter","","/std/fs/PathBuf.html#item.from_iter"],["std::fs::PathBuf::fmt","","/std/fs/PathBuf.html#item.fmt"],["std::fs::PathBuf::clone","","/std/fs/PathBuf.html#item.clone"],["std::fs::PathBuf::free","","/std/fs/PathBuf.html#item.free"],["std::fs::PathBuf::move","","/std/fs/PathBuf.html#item.move"],["std::fs::PathIterator::next","","/std/fs/PathIterator.html#item.next"],["std::fs::PathSegment::equals","","/std/fs/PathSegment.html#item.equals"],["std::fs::PathSegment::fmt","","/std/fs/PathSegment.html#item.fmt"],["std::fs::PathSegmentKind::Root","","/std/fs/PathSegmentKind.html#item.Root"],["std::fs::PathSegmentKind::Normal","","/std/fs/PathSegmentKind.html#item.Normal"],["std::fs::PathSegmentKind::CurDir","","/std/fs/PathSegmentKind.html#item.CurDir"],["std::fs::PathSegmentKind::ParentDir","","/std/fs/PathSegmentKind.html#item.ParentDir"],["std::fs::PathSegmentKind::equals","","/std/fs/PathSegmentKind.html#item.equals"],["std::fs::PathSegmentKind::fmt","","/std/fs/PathSegmentKind.html#item.fmt"],["std::fs::tests::test_path_iter","","/std/fs/tests.html#item.test_path_iter"],["std::fs::tests::test_path_fmt","","/std/fs/tests.html#item.test_path_fmt"],["std::fs::tests::test_is_absolute","","/std/fs/tests.html#item.test_is_absolute"],["std::fs::tests::test_strip_prefix","","/std/fs/tests.html#item.test_strip_prefix"],["std::fs::tests::test_from_iter","","/std/fs/tests.html#item.test_from_iter"],["std::fs::tests::test_push_pop","","/std/fs/tests.html#item.test_push_pop"],["std::fs::tests::test_parent","","/std/fs/tests.html#item.test_parent"],["std::fs::unix::tests","","/std/fs/unix/tests.html"],["std::fs::unix::create_directory"," Create a new directory","/std/fs/unix.html#item.create_directory"],["std::fs::unix::remove_file"," Remove a file","/std/fs/unix.html#item.remove_file"],["std::fs::unix::remove_directory"," Remove an empty directory","/std/fs/unix.html#item.remove_directory"],["std::fs::unix::read_directory"," Returns iterator over the items in a directory.","/std/fs/unix.html#item.read_directory"],["std::fs::unix::OpenOptions"," Options for how the file should be opened.","/std/fs/unix/OpenOptions.html"],["std::fs::unix::DirBuilder"," Utility for creating directories.","/std/fs/unix/DirBuilder.html"],["std::fs::unix::File","","/std/fs/unix/File.html"],["std::fs::unix::DirIterator"," Iterator over the items in a directory","/std/fs/unix/DirIterator.html"],["std::fs::unix::DirEntry"," Directory entry","/std/fs/unix/DirEntry.html"],["std::fs::unix::FileAttr"," File attributes (`stat`)","/std/fs/unix/FileAttr.html"],["std::fs::unix::FileType"," Type of the file (regular file, symlink, directory, ...)","/std/fs/unix/FileType.html"],["std::fs::unix::DirBuilder::new","","/std/fs/unix/DirBuilder.html#item.new"],["std::fs::unix::DirBuilder::recursive"," Sets whether to create a recursive directory structure.","/std/fs/unix/DirBuilder.html#item.recursive"],["std::fs::unix::DirBuilder::mode"," Sets the mode for creation.","/std/fs/unix/DirBuilder.html#item.mode"],["std::fs::unix::DirBuilder::_mkdir","","/std/fs/unix/DirBuilder.html#item._mkdir"],["std::fs::unix::DirBuilder::create"," Create the directory (or directory tree) specified by `path`.","/std/fs/unix/DirBuilder.html#item.create"],["std::fs::unix::DirEntry::name"," Return the name of the item in directory","/std/fs/unix/DirEntry.html#item.name"],["std::fs::unix::DirEntry::file_type"," Returns the file type","/std/fs/unix/DirEntry.html#item.file_type"],["std::fs::unix::DirIterator::next"," Returns the next item, if any.","/std/fs/unix/DirIterator.html#item.next"],["std::fs::unix::DirIterator::close"," Closes the file descriptor associated with the iterator.","/std/fs/unix/DirIterator.html#item.close"],["std::fs::unix::File::open"," Opens file in read-only mode.","/std/fs/unix/File.html#item.open"],["std::fs::unix::File::create"," Creates a new file for writing (truncating it if it already exists).","/std/fs/unix/File.html#item.create"],["std::fs::unix::File::open_with"," Opens file with custom options.","/std/fs/unix/File.html#item.open_with"],["std::fs::unix::File::attributes"," Returns the file attributes (`stat`) for the file","/std/fs/unix/File.html#item.attributes"],["std::fs::unix::File::from_fd"," Create a file object from an existing file descriptor.","/std/fs/unix/File.html#item.from_fd"],["std::fs::unix::File::as_fd"," Get the file descriptor for the file.","/std/fs/unix/File.html#item.as_fd"],["std::fs::unix::File::read_to_string"," Read the entire file into a [std::string::StringBuf]","/std/fs/unix/File.html#item.read_to_string"],["std::fs::unix::File::seek","","/std/fs/unix/File.html#item.seek"],["std::fs::unix::File::flush","","/std/fs/unix/File.html#item.flush"],["std::fs::unix::File::sync","","/std/fs/unix/File.html#item.sync"],["std::fs::unix::File::close","","/std/fs/unix/File.html#item.close"],["std::fs::unix::File::move"," Creates a copy of the object, leaving an inert object behind.","/std/fs/unix/File.html#item.move"],["std::fs::unix::FileAttr::from_path","","/std/fs/unix/FileAttr.html#item.from_path"],["std::fs::unix::FileAttr::file_type","","/std/fs/unix/FileAttr.html#item.file_type"],["std::fs::unix::FileAttr::size","","/std/fs/unix/FileAttr.html#item.size"],["std::fs::unix::FileType::Fifo","","/std/fs/unix/FileType.html#item.Fifo"],["std::fs::unix::FileType::CharacterDevice","","/std/fs/unix/FileType.html#item.CharacterDevice"],["std::fs::unix::FileType::Directory","","/std/fs/unix/FileType.html#item.Directory"],["std::fs::unix::FileType::BlockDevice","","/std/fs/unix/FileType.html#item.BlockDevice"],["std::fs::unix::FileType::Regular","","/std/fs/unix/FileType.html#item.Regular"],["std::fs::unix::FileType::Link","","/std/fs/unix/FileType.html#item.Link"],["std::fs::unix::FileType::Socket","","/std/fs/unix/FileType.html#item.Socket"],["std::fs::unix::FileType::Unknown","","/std/fs/unix/FileType.html#item.Unknown"],["std::fs::unix::FileType::fmt","","/std/fs/unix/FileType.html#item.fmt"],["std::fs::unix::FileType::equals","","/std/fs/unix/FileType.html#item.equals"],["std::fs::unix::OpenOptions::new","","/std/fs/unix/OpenOptions.html#item.new"],["std::fs::unix::OpenOptions::read"," Sets the option for read access.","/std/fs/unix/OpenOptions.html#item.read"],["std::fs::unix::OpenOptions::write"," Sets the option for write access.","/std/fs/unix/OpenOptions.html#item.write"],["std::fs::unix::OpenOptions::append"," Sets the option for append access.","/std/fs/unix/OpenOptions.html#item.append"],["std::fs::unix::OpenOptions::truncate"," Sets the option for truncate access.","/std/fs/unix/OpenOptions.html#item.truncate"],["std::fs::unix::OpenOptions::create"," Sets the option for create access.","/std/fs/unix/OpenOptions.html#item.create"],["std::fs::unix::OpenOptions::create_new"," Sets the option for create new access.","/std/fs/unix/OpenOptions.html#item.create_new"],["std::fs::unix::OpenOptions::custom_flags"," Sets the custom flags.","/std/fs/unix/OpenOptions.html#item.custom_flags"],["std::fs::unix::OpenOptions::mode"," Sets the mode for creation.","/std/fs/unix/OpenOptions.html#item.mode"],["std::fs::unix::OpenOptions::get_access_mode","","/std/fs/unix/OpenOptions.html#item.get_access_mode"],["std::fs::unix::OpenOptions::get_creation_mode","","/std/fs/unix/OpenOptions.html#item.get_creation_mode"],["std::fs::unix::tests::mktemp","","/std/fs/unix/tests.html#item.mktemp"],["std::fs::unix::tests::test_open","","/std/fs/unix/tests.html#item.test_open"],["std::fs::unix::tests::test_read_directory","","/std/fs/unix/tests.html#item.test_read_directory"],["std::fs::unix::tests::test_create_remove_directory","","/std/fs/unix/tests.html#item.test_create_remove_directory"],["std::fs::unix::tests::test_remove_file","","/std/fs/unix/tests.html#item.test_remove_file"],["std::fs::unix::tests::BUF","","/std/fs/unix/tests.html#item.BUF"],["std::fs::unix::tests::BUF1","","/std/fs/unix/tests.html#item.BUF1"],["std::hash::xxhash","","/std/hash/xxhash.html"],["std::hash::hash_of"," Calculate the hash of a value.","/std/hash.html#item.hash_of"],["std::hash::Hasher"," Hashing algorithms.","/std/hash/Hasher.html"],["std::hash::Hashable"," Types that can be hashed.","/std/hash/Hashable.html"],["std::hash::DefaultHash"," The default hashing algorithm used for hash-based collections if none is specified.","/std/hash.html#item.DefaultHash"],["std::hash::Hashable::hash"," Update hasher state with the contents of this object.","/std/hash/Hashable.html#item.hash"],["std::hash::Hasher::new"," Create a new hasher.","/std/hash/Hasher.html#item.new"],["std::hash::Hasher::write"," Write a byte slice into a hasher.","/std/hash/Hasher.html#item.write"],["std::hash::Hasher::finish"," Finalize the hashing and return the hash value.","/std/hash/Hasher.html#item.finish"],["std::hash::xxhash::round","","/std/hash/xxhash.html#item.round"],["std::hash::xxhash::merge_round","","/std/hash/xxhash.html#item.merge_round"],["std::hash::xxhash::avalanche","","/std/hash/xxhash.html#item.avalanche"],["std::hash::xxhash::Xxh64","","/std/hash/xxhash/Xxh64.html"],["std::hash::xxhash::CHUNK_SIZE","","/std/hash/xxhash.html#item.CHUNK_SIZE"],["std::hash::xxhash::PRIME_1","","/std/hash/xxhash.html#item.PRIME_1"],["std::hash::xxhash::PRIME_2","","/std/hash/xxhash.html#item.PRIME_2"],["std::hash::xxhash::PRIME_3","","/std/hash/xxhash.html#item.PRIME_3"],["std::hash::xxhash::PRIME_4","","/std/hash/xxhash.html#item.PRIME_4"],["std::hash::xxhash::PRIME_5","","/std/hash/xxhash.html#item.PRIME_5"],["std::hash::xxhash::Xxh64::new","","/std/hash/xxhash/Xxh64.html#item.new"],["std::hash::xxhash::Xxh64::with_seed","","/std/hash/xxhash/Xxh64.html#item.with_seed"],["std::hash::xxhash::Xxh64::write","","/std/hash/xxhash/Xxh64.html#item.write"],["std::hash::xxhash::Xxh64::finish","","/std/hash/xxhash/Xxh64.html#item.finish"],["std::internal::assert_eq","","/std/internal.html#item.assert_eq"],["std::internal::assert_ne","","/std/internal.html#item.assert_ne"],["std::intrinsics::compile_fail","","/std/intrinsics.html#item.compile_fail"],["std::intrinsics::compile_warn","","/std/intrinsics.html#item.compile_warn"],["std::intrinsics::compile_note","","/std/intrinsics.html#item.compile_note"],["std::intrinsics::unreachable","","/std/intrinsics.html#item.unreachable"],["std::intrinsics::trap","","/std/intrinsics.html#item.trap"],["std::intrinsics::size_of","","/std/intrinsics.html#item.size_of"],["std::intrinsics::type_id","","/std/intrinsics.html#item.type_id"],["std::intrinsics::type_name","","/std/intrinsics.html#item.type_name"],["std::intrinsics::align_of","","/std/intrinsics.html#item.align_of"],["std::intrinsics::aligned_alloca","","/std/intrinsics.html#item.aligned_alloca"],["std::intrinsics::codegen_const","","/std/intrinsics.html#item.codegen_const"],["std::intrinsics::codegen_func","","/std/intrinsics.html#item.codegen_func"],["std::io::unix","","/std/io/unix.html"],["std::io::internal","","/std/io/internal.html"],["std::io::tests","","/std/io/tests.html"],["std::io::copy"," Copy the entire stream `src` into `dst`","/std/io.html#item.copy"],["std::io::copy_using"," Copy the entire stream `src` into `dst` using a provided buffer.","/std/io.html#item.copy_using"],["std::io::read_byte"," Reads a single byte from the stream.","/std/io.html#item.read_byte"],["std::io::read_until"," Reads the stream into `buf` until a specific byte is encountered.","/std/io.html#item.read_until"],["std::io::lines","","/std/io.html#item.lines"],["std::io::Error"," Error type for I/O operations","/std/io/Error.html"],["std::io::FileDescriptor"," Platform specific file descriptor.","/std/io/FileDescriptor.html"],["std::io::SliceReader"," A readable stream backed by an in-memory string slice.","/std/io/SliceReader.html"],["std::io::StdioStream"," Standard I/O stream.","/std/io/StdioStream.html"],["std::io::Pipe"," A FIFO pipe.","/std/io/Pipe.html"],["std::io::StringWriter"," A writable stream backed by [std::string::StringBuf].","/std/io/StringWriter.html"],["std::io::BufferedReader"," A buffered wrapper over an underlying stream.","/std/io/BufferedReader.html"],["std::io::BufferedWriter"," A buffered wrapper over an underlying writable stream.","/std/io/BufferedWriter.html"],["std::io::LineIterator"," Iterator that reads the inner stream line by line.","/std/io/LineIterator.html"],["std::io::AsFileDescriptor"," Types that are wrappers over a file descriptor.","/std/io/AsFileDescriptor.html"],["std::io::Readable"," Types that implement readable stream semantics.","/std/io/Readable.html"],["std::io::Writable"," Types that implement writable stream semantics.","/std/io/Writable.html"],["std::io::Seekable"," Streams that can be fast-forwarded or rewound to an arbitrary offset.","/std/io/Seekable.html"],["std::io::BufferedReadable"," Streams that have an internal buffer.","/std/io/BufferedReadable.html"],["std::io::SeekFrom"," Reference point for the seek operation.","/std/io/SeekFrom.html"],["std::io::print"," Prints a formatted string to standard output.","/std/io/print.html"],["std::io::println"," Prints a formatted string to standard output with newline.","/std/io/println.html"],["std::io::eprint"," Prints a formatted string to standard error.","/std/io/eprint.html"],["std::io::eprintln"," Prints a formatted string to standard error with newline.","/std/io/eprintln.html"],["std::io::DEFAULT_BUFFER_SIZE","","/std/io.html#item.DEFAULT_BUFFER_SIZE"],["std::io::FMT_BUF"," Buffer for formatted standard I/O.","/std/io.html#item.FMT_BUF"],["std::io::AsFileDescriptor::as_fd","","/std/io/AsFileDescriptor.html#item.as_fd"],["std::io::BufferedReadable::fill_buffer"," Return the current contents of the buffer, reading additional","/std/io/BufferedReadable.html#item.fill_buffer"],["std::io::BufferedReadable::consume"," Mark `amount` bytes as consumed.","/std/io/BufferedReadable.html#item.consume"],["std::io::BufferedReader::new"," Create a BufferedReader with a heap-allocated buffer of the given size.","/std/io/BufferedReader.html#item.new"],["std::io::BufferedReader::from_slice"," Creates a BufferedReader from an existing-buffer, potentially","/std/io/BufferedReader.html#item.from_slice"],["std::io::BufferedReader::fill_buffer"," Return the current contents of the buffer, reading additional","/std/io/BufferedReader.html#item.fill_buffer"],["std::io::BufferedReader::consume"," Mark `amount` bytes as consumed.","/std/io/BufferedReader.html#item.consume"],["std::io::BufferedReader::read"," Reads from the stream into a provided buffer.","/std/io/BufferedReader.html#item.read"],["std::io::BufferedReader::read_exact"," Fills the provided buffer by reading from the stream.","/std/io/BufferedReader.html#item.read_exact"],["std::io::BufferedReader::free"," Frees the memory backing the object.","/std/io/BufferedReader.html#item.free"],["std::io::BufferedReader::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/BufferedReader.html#item.move"],["std::io::BufferedReader::seek"," Jump to a specified position in the stream.","/std/io/BufferedReader.html#item.seek"],["std::io::BufferedWriter::new"," Create a BufferedWriter with a heap-allocated buffer of the given size.","/std/io/BufferedWriter.html#item.new"],["std::io::BufferedWriter::from_slice"," Creates a BufferedWriter from an existing-buffer, potentially","/std/io/BufferedWriter.html#item.from_slice"],["std::io::BufferedWriter::write_full","","/std/io/BufferedWriter.html#item.write_full"],["std::io::BufferedWriter::write"," Write the buffer to the stream.","/std/io/BufferedWriter.html#item.write"],["std::io::BufferedWriter::write_all"," Writes all the bytes in the buffer to the stream.","/std/io/BufferedWriter.html#item.write_all"],["std::io::BufferedWriter::flush"," Flush the stream","/std/io/BufferedWriter.html#item.flush"],["std::io::BufferedWriter::_write_to_buffer","","/std/io/BufferedWriter.html#item._write_to_buffer"],["std::io::BufferedWriter::_flush_buffer","","/std/io/BufferedWriter.html#item._flush_buffer"],["std::io::BufferedWriter::_write_all_full","","/std/io/BufferedWriter.html#item._write_all_full"],["std::io::BufferedWriter::free"," Frees the memory backing the object.","/std/io/BufferedWriter.html#item.free"],["std::io::BufferedWriter::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/BufferedWriter.html#item.move"],["std::io::BufferedWriter::write_str"," Write a string","/std/io/BufferedWriter.html#item.write_str"],["std::io::Error::from_errno"," Create `Error` from the last OS error (`errno`)","/std/io/Error.html#item.from_errno"],["std::io::Error::from_gai"," Create `Error` from the code returned by [libc::getaddrinfo].","/std/io/Error.html#item.from_gai"],["std::io::Error::custom"," Create a custom Error.","/std/io/Error.html#item.custom"],["std::io::Error::eof"," Create an error signalling end-of-file.","/std/io/Error.html#item.eof"],["std::io::Error::as_errno","","/std/io/Error.html#item.as_errno"],["std::io::Error::fmt","","/std/io/Error.html#item.fmt"],["std::io::Error::equals","","/std/io/Error.html#item.equals"],["std::io::FileDescriptor::new"," Create a `FileDescriptor` object from a raw file descriptor.","/std/io/FileDescriptor.html#item.new"],["std::io::FileDescriptor::close"," Close the file descriptor.","/std/io/FileDescriptor.html#item.close"],["std::io::FileDescriptor::set_nonblocking"," Sets the file descriptor blocking mode.","/std/io/FileDescriptor.html#item.set_nonblocking"],["std::io::FileDescriptor::set_cloexec"," Sets whether the file descriptor is closed on exec.","/std/io/FileDescriptor.html#item.set_cloexec"],["std::io::FileDescriptor::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/FileDescriptor.html#item.move"],["std::io::LineIterator::with_line_buffer"," Create a line iterator with a pre-allocated buffer.","/std/io/LineIterator.html#item.with_line_buffer"],["std::io::LineIterator::new"," Create a line iterator with a default buffer.","/std/io/LineIterator.html#item.new"],["std::io::LineIterator::with_capacity"," Create a line iterator with a given capacity","/std/io/LineIterator.html#item.with_capacity"],["std::io::LineIterator::next"," Returns the next item, if any.","/std/io/LineIterator.html#item.next"],["std::io::LineIterator::free"," Frees the memory backing the object.","/std/io/LineIterator.html#item.free"],["std::io::LineIterator::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/LineIterator.html#item.move"],["std::io::Pipe::anonymous"," Create an anonymous pipe pair.","/std/io/Pipe.html#item.anonymous"],["std::io::Pipe::from_fd"," Create a `Pipe` object from a raw file descriptor.","/std/io/Pipe.html#item.from_fd"],["std::io::Pipe::as_fd","","/std/io/Pipe.html#item.as_fd"],["std::io::Pipe::close"," Close the pipe.","/std/io/Pipe.html#item.close"],["std::io::Pipe::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/Pipe.html#item.move"],["std::io::Readable::read"," Reads from the stream into a provided buffer.","/std/io/Readable.html#item.read"],["std::io::Readable::read_exact"," Fills the provided buffer by reading from the stream.","/std/io/Readable.html#item.read_exact"],["std::io::Readable::read_to_end"," Reads the entire stream into a `StringBuf`.","/std/io/Readable.html#item.read_to_end"],["std::io::SeekFrom::Beginning","","/std/io/SeekFrom.html#item.Beginning"],["std::io::SeekFrom::Current","","/std/io/SeekFrom.html#item.Current"],["std::io::SeekFrom::End","","/std/io/SeekFrom.html#item.End"],["std::io::Seekable::seek"," Jump to a specified position in the stream.","/std/io/Seekable.html#item.seek"],["std::io::Seekable::rewind"," Rewind the stream to the beginning.","/std/io/Seekable.html#item.rewind"],["std::io::Seekable::position"," Returns the current position in the stream from the beginning.","/std/io/Seekable.html#item.position"],["std::io::SliceReader::new","","/std/io/SliceReader.html#item.new"],["std::io::SliceReader::read"," Reads from the stream into a provided buffer.","/std/io/SliceReader.html#item.read"],["std::io::SliceReader::fill_buffer"," Return the current contents of the buffer, reading additional","/std/io/SliceReader.html#item.fill_buffer"],["std::io::SliceReader::consume"," Mark `amount` bytes as consumed.","/std/io/SliceReader.html#item.consume"],["std::io::SliceReader::seek"," Jump to a specified position in the stream.","/std/io/SliceReader.html#item.seek"],["std::io::SliceReader::position"," Returns the current position in the stream from the beginning.","/std/io/SliceReader.html#item.position"],["std::io::StdioStream::stdin"," Standard input","/std/io/StdioStream.html#item.stdin"],["std::io::StdioStream::stdout"," Standard output","/std/io/StdioStream.html#item.stdout"],["std::io::StdioStream::stderr"," Standard error","/std/io/StdioStream.html#item.stderr"],["std::io::StdioStream::as_fd","","/std/io/StdioStream.html#item.as_fd"],["std::io::StdioStream::close"," Close the stream.","/std/io/StdioStream.html#item.close"],["std::io::StdioStream::flush"," Flush the stream.","/std/io/StdioStream.html#item.flush"],["std::io::StdioStream::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/StdioStream.html#item.move"],["std::io::StringWriter::new","","/std/io/StringWriter.html#item.new"],["std::io::StringWriter::write"," Write the buffer to the stream.","/std/io/StringWriter.html#item.write"],["std::io::StringWriter::flush"," Flush the stream","/std/io/StringWriter.html#item.flush"],["std::io::Writable::write"," Write the buffer to the stream.","/std/io/Writable.html#item.write"],["std::io::Writable::write_all"," Writes all the bytes in the buffer to the stream.","/std/io/Writable.html#item.write_all"],["std::io::Writable::flush"," Flush the stream","/std/io/Writable.html#item.flush"],["std::io::internal::default_read_exact","","/std/io/internal.html#item.default_read_exact"],["std::io::tests::test_slice_reader","","/std/io/tests.html#item.test_slice_reader"],["std::io::tests::test_slice_reader_seek","","/std/io/tests.html#item.test_slice_reader_seek"],["std::io::tests::test_lines","","/std/io/tests.html#item.test_lines"],["std::io::tests::test_read_byte","","/std/io/tests.html#item.test_read_byte"],["std::io::tests::test_copy","","/std/io/tests.html#item.test_copy"],["std::io::tests::read_n","","/std/io/tests/read_n.html"],["std::io::tests::BUF","","/std/io/tests.html#item.BUF"],["std::io::unix::Error"," Error type for I/O operations","/std/io/unix/Error.html"],["std::io::unix::FileDescriptor"," Platform specific file descriptor.","/std/io/unix/FileDescriptor.html"],["std::io::unix::StdioStream"," Standard I/O stream.","/std/io/unix/StdioStream.html"],["std::io::unix::Pipe"," A FIFO pipe.","/std/io/unix/Pipe.html"],["std::io::unix::ErrorInner","","/std/io/unix/ErrorInner.html"],["std::io::unix::FdReadWrite"," Mixin for read and write operations for objects that can be viewed as a file descriptor.","/std/io/unix/FdReadWrite.html"],["std::io::unix::ErrorKind","","/std/io/unix/ErrorKind.html"],["std::io::unix::errno_try","","/std/io/unix/errno_try.html"],["std::io::unix::Error::from_errno"," Create `Error` from the last OS error (`errno`)","/std/io/unix/Error.html#item.from_errno"],["std::io::unix::Error::from_gai"," Create `Error` from the code returned by [libc::getaddrinfo].","/std/io/unix/Error.html#item.from_gai"],["std::io::unix::Error::custom"," Create a custom Error.","/std/io/unix/Error.html#item.custom"],["std::io::unix::Error::eof"," Create an error signalling end-of-file.","/std/io/unix/Error.html#item.eof"],["std::io::unix::Error::as_errno","","/std/io/unix/Error.html#item.as_errno"],["std::io::unix::Error::fmt","","/std/io/unix/Error.html#item.fmt"],["std::io::unix::Error::equals","","/std/io/unix/Error.html#item.equals"],["std::io::unix::ErrorKind::UnexpectedEof","","/std/io/unix/ErrorKind.html#item.UnexpectedEof"],["std::io::unix::ErrorKind::Os","","/std/io/unix/ErrorKind.html#item.Os"],["std::io::unix::ErrorKind::GetAddrInfo","","/std/io/unix/ErrorKind.html#item.GetAddrInfo"],["std::io::unix::ErrorKind::UserDefined","","/std/io/unix/ErrorKind.html#item.UserDefined"],["std::io::unix::FdReadWrite::read"," io::Readable::read","/std/io/unix/FdReadWrite.html#item.read"],["std::io::unix::FdReadWrite::write"," io::Writable::write","/std/io/unix/FdReadWrite.html#item.write"],["std::io::unix::FileDescriptor::new"," Create a `FileDescriptor` object from a raw file descriptor.","/std/io/unix/FileDescriptor.html#item.new"],["std::io::unix::FileDescriptor::close"," Close the file descriptor.","/std/io/unix/FileDescriptor.html#item.close"],["std::io::unix::FileDescriptor::set_nonblocking"," Sets the file descriptor blocking mode.","/std/io/unix/FileDescriptor.html#item.set_nonblocking"],["std::io::unix::FileDescriptor::set_cloexec"," Sets whether the file descriptor is closed on exec.","/std/io/unix/FileDescriptor.html#item.set_cloexec"],["std::io::unix::FileDescriptor::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/unix/FileDescriptor.html#item.move"],["std::io::unix::Pipe::anonymous"," Create an anonymous pipe pair.","/std/io/unix/Pipe.html#item.anonymous"],["std::io::unix::Pipe::from_fd"," Create a `Pipe` object from a raw file descriptor.","/std/io/unix/Pipe.html#item.from_fd"],["std::io::unix::Pipe::as_fd","","/std/io/unix/Pipe.html#item.as_fd"],["std::io::unix::Pipe::close"," Close the pipe.","/std/io/unix/Pipe.html#item.close"],["std::io::unix::Pipe::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/unix/Pipe.html#item.move"],["std::io::unix::StdioStream::stdin"," Standard input","/std/io/unix/StdioStream.html#item.stdin"],["std::io::unix::StdioStream::stdout"," Standard output","/std/io/unix/StdioStream.html#item.stdout"],["std::io::unix::StdioStream::stderr"," Standard error","/std/io/unix/StdioStream.html#item.stderr"],["std::io::unix::StdioStream::as_fd","","/std/io/unix/StdioStream.html#item.as_fd"],["std::io::unix::StdioStream::close"," Close the stream.","/std/io/unix/StdioStream.html#item.close"],["std::io::unix::StdioStream::flush"," Flush the stream.","/std/io/unix/StdioStream.html#item.flush"],["std::io::unix::StdioStream::move"," Creates a copy of the object, leaving an inert object behind.","/std/io/unix/StdioStream.html#item.move"],["std::iter::tests","","/std/iter/tests.html"],["std::iter::empty"," Returns an iterator that produces no elements.","/std/iter.html#item.empty"],["std::iter::from_fn"," Returns an iterator that produces no elements.","/std/iter.html#item.from_fn"],["std::iter::repeat"," Returns an iterator that repeats the same value indefinitely.","/std/iter.html#item.repeat"],["std::iter::once"," Returns an iterator that repeats a single element exactly once.","/std/iter.html#item.once"],["std::iter::RevIterator"," Reverse iterator.","/std/iter/RevIterator.html"],["std::iter::MapIterator"," Map iterator.","/std/iter/MapIterator.html"],["std::iter::TakeWhileIterator"," Iterator that takes elements while a predicate is true.","/std/iter/TakeWhileIterator.html"],["std::iter::SkipWhileIterator"," Iterator that skips elements while a predicate is true.","/std/iter/SkipWhileIterator.html"],["std::iter::FilterMapIterator"," Filter map iterator.","/std/iter/FilterMapIterator.html"],["std::iter::FilterIterator"," Filter iterator.","/std/iter/FilterIterator.html"],["std::iter::SkipIterator"," Iterator that skips a specified number of elements.","/std/iter/SkipIterator.html"],["std::iter::StepByIterator"," Step by iterator.","/std/iter/StepByIterator.html"],["std::iter::FusedIterator"," Fused iterator.","/std/iter/FusedIterator.html"],["std::iter::TakeIterator"," Iterator that takes a specified number of elements.","/std/iter/TakeIterator.html"],["std::iter::EnumerateIterator"," Enumerate iterator.","/std/iter/EnumerateIterator.html"],["std::iter::ChainIterator"," Chain iterator.","/std/iter/ChainIterator.html"],["std::iter::InspectIterator"," Inspect iterator.","/std/iter/InspectIterator.html"],["std::iter::Grouping"," A group iterator for [GroupByIterator].","/std/iter/Grouping.html"],["std::iter::GroupByIterator"," Grouping iterator","/std/iter/GroupByIterator.html"],["std::iter::PeekableIterator"," Peekable iterator","/std/iter/PeekableIterator.html"],["std::iter::EmptyIterator"," An empty iterator.","/std/iter/EmptyIterator.html"],["std::iter::FromFnIterator","","/std/iter/FromFnIterator.html"],["std::iter::RepeatIterator","","/std/iter/RepeatIterator.html"],["std::iter::OnceIterator","","/std/iter/OnceIterator.html"],["std::iter::RangeFull","","/std/iter/RangeFull.html"],["std::iter::RangeFrom","","/std/iter/RangeFrom.html"],["std::iter::RangeTo","","/std/iter/RangeTo.html"],["std::iter::Range","","/std/iter/Range.html"],["std::iter::RangeIter","","/std/iter/RangeIter.html"],["std::iter::Iterator"," Iterators.","/std/iter/Iterator.html"],["std::iter::DoubleEndedIterator"," Iterators that can be consumed from both ends.","/std/iter/DoubleEndedIterator.html"],["std::iter::DoubleEndedIteratorExt"," Extension mixin for [DoubleEndedIterator] types.","/std/iter/DoubleEndedIteratorExt.html"],["std::iter::Iterable","","/std/iter/Iterable.html"],["std::iter::IterableRef","","/std/iter/IterableRef.html"],["std::iter::IterableMut","","/std/iter/IterableMut.html"],["std::iter::IteratorExt","","/std/iter/IteratorExt.html"],["std::iter::ChainIterator::next"," Returns the next item, if any.","/std/iter/ChainIterator.html#item.next"],["std::iter::ChainIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/ChainIterator.html#item.size_hint"],["std::iter::ChainIterator::next_back"," Returns the next item from the back, if any.","/std/iter/ChainIterator.html#item.next_back"],["std::iter::DoubleEndedIterator::next_back"," Returns the next item from the back, if any.","/std/iter/DoubleEndedIterator.html#item.next_back"],["std::iter::DoubleEndedIteratorExt::rev"," \"Reverse\" the iterator.","/std/iter/DoubleEndedIteratorExt.html#item.rev"],["std::iter::EmptyIterator::next"," Returns the next item, if any.","/std/iter/EmptyIterator.html#item.next"],["std::iter::EmptyIterator::size_hint","","/std/iter/EmptyIterator.html#item.size_hint"],["std::iter::EnumerateIterator::next"," Returns the next item, if any.","/std/iter/EnumerateIterator.html#item.next"],["std::iter::EnumerateIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/EnumerateIterator.html#item.size_hint"],["std::iter::FilterIterator::next"," Returns the next item, if any.","/std/iter/FilterIterator.html#item.next"],["std::iter::FilterIterator::next_back"," Returns the next item from the back, if any.","/std/iter/FilterIterator.html#item.next_back"],["std::iter::FilterMapIterator::next"," Returns the next item, if any.","/std/iter/FilterMapIterator.html#item.next"],["std::iter::FromFnIterator::next"," Returns the next item, if any.","/std/iter/FromFnIterator.html#item.next"],["std::iter::FusedIterator::next"," Returns the next item, if any.","/std/iter/FusedIterator.html#item.next"],["std::iter::FusedIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/FusedIterator.html#item.size_hint"],["std::iter::FusedIterator::next_back"," Returns the next item from the back, if any.","/std/iter/FusedIterator.html#item.next_back"],["std::iter::GroupByIterator::next"," Returns the next item, if any.","/std/iter/GroupByIterator.html#item.next"],["std::iter::Grouping::next"," Returns the next item, if any.","/std/iter/Grouping.html#item.next"],["std::iter::InspectIterator::next"," Returns the next item, if any.","/std/iter/InspectIterator.html#item.next"],["std::iter::InspectIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/InspectIterator.html#item.size_hint"],["std::iter::Iterable::iter","","/std/iter/Iterable.html#item.iter"],["std::iter::IterableMut::iter_mut","","/std/iter/IterableMut.html#item.iter_mut"],["std::iter::IterableRef::iter_ref","","/std/iter/IterableRef.html#item.iter_ref"],["std::iter::Iterator::next"," Returns the next item, if any.","/std/iter/Iterator.html#item.next"],["std::iter::Iterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/Iterator.html#item.size_hint"],["std::iter::IteratorExt::iter"," Return self.","/std/iter/IteratorExt.html#item.iter"],["std::iter::IteratorExt::fuse"," Return an iterator that returns `Option::none()` forever after the","/std/iter/IteratorExt.html#item.fuse"],["std::iter::IteratorExt::chain"," Returns an iterator that yields all elements of `self` and then all elements of `other`.","/std/iter/IteratorExt.html#item.chain"],["std::iter::IteratorExt::skip"," Returns an iterator that skips first `n` values.","/std/iter/IteratorExt.html#item.skip"],["std::iter::IteratorExt::step_by"," Returns an iterator that steps by `n` values.","/std/iter/IteratorExt.html#item.step_by"],["std::iter::IteratorExt::take"," Returns an iterator that yields at most `n` elements.","/std/iter/IteratorExt.html#item.take"],["std::iter::IteratorExt::enumerate"," Returns an iterator that attaches a sequence number of each item.","/std/iter/IteratorExt.html#item.enumerate"],["std::iter::IteratorExt::last"," Returns the last value of the iterator.","/std/iter/IteratorExt.html#item.last"],["std::iter::IteratorExt::nth"," Returns the `n`-th value of the iterator.","/std/iter/IteratorExt.html#item.nth"],["std::iter::IteratorExt::count"," Counts the number of elements in this iterator.","/std/iter/IteratorExt.html#item.count"],["std::iter::IteratorExt::inspect","","/std/iter/IteratorExt.html#item.inspect"],["std::iter::IteratorExt::take_while"," Returns an iterator that yields the elements while a predicate is true.","/std/iter/IteratorExt.html#item.take_while"],["std::iter::IteratorExt::skip_while"," Returns an iterator that skips the elements while a predicate is true.","/std/iter/IteratorExt.html#item.skip_while"],["std::iter::IteratorExt::map"," Returns an iterator that transforms the elements of this iterator.","/std/iter/IteratorExt.html#item.map"],["std::iter::IteratorExt::foreach"," Executes a function on each element of this iterator.","/std/iter/IteratorExt.html#item.foreach"],["std::iter::IteratorExt::filter"," Returns an iterator that yields the elements of this iterator that match a predicate.","/std/iter/IteratorExt.html#item.filter"],["std::iter::IteratorExt::filter_map","","/std/iter/IteratorExt.html#item.filter_map"],["std::iter::IteratorExt::reduce","","/std/iter/IteratorExt.html#item.reduce"],["std::iter::IteratorExt::all","","/std/iter/IteratorExt.html#item.all"],["std::iter::IteratorExt::any","","/std/iter/IteratorExt.html#item.any"],["std::iter::IteratorExt::to_vector","","/std/iter/IteratorExt.html#item.to_vector"],["std::iter::IteratorExt::fill_slice","","/std/iter/IteratorExt.html#item.fill_slice"],["std::iter::IteratorExt::peekable","","/std/iter/IteratorExt.html#item.peekable"],["std::iter::IteratorExt::group_by","","/std/iter/IteratorExt.html#item.group_by"],["std::iter::MapIterator::next"," Returns the next item, if any.","/std/iter/MapIterator.html#item.next"],["std::iter::MapIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/MapIterator.html#item.size_hint"],["std::iter::MapIterator::next_back"," Returns the next item from the back, if any.","/std/iter/MapIterator.html#item.next_back"],["std::iter::OnceIterator::next"," Returns the next item, if any.","/std/iter/OnceIterator.html#item.next"],["std::iter::OnceIterator::next_back","","/std/iter/OnceIterator.html#item.next_back"],["std::iter::OnceIterator::size_hint","","/std/iter/OnceIterator.html#item.size_hint"],["std::iter::PeekableIterator::next"," Returns the next item, if any.","/std/iter/PeekableIterator.html#item.next"],["std::iter::PeekableIterator::peek"," Return the next element in the iterator without consuming it.","/std/iter/PeekableIterator.html#item.peek"],["std::iter::PeekableIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/PeekableIterator.html#item.size_hint"],["std::iter::Range::new","","/std/iter/Range.html#item.new"],["std::iter::Range::iter","","/std/iter/Range.html#item.iter"],["std::iter::Range::len","","/std/iter/Range.html#item.len"],["std::iter::RangeFrom::new","","/std/iter/RangeFrom.html#item.new"],["std::iter::RangeFrom::iter","","/std/iter/RangeFrom.html#item.iter"],["std::iter::RangeFrom::len","","/std/iter/RangeFrom.html#item.len"],["std::iter::RangeFull::new","","/std/iter/RangeFull.html#item.new"],["std::iter::RangeFull::iter","","/std/iter/RangeFull.html#item.iter"],["std::iter::RangeFull::len","","/std/iter/RangeFull.html#item.len"],["std::iter::RangeIter::next"," Returns the next item, if any.","/std/iter/RangeIter.html#item.next"],["std::iter::RangeIter::next_back","","/std/iter/RangeIter.html#item.next_back"],["std::iter::RangeIter::size_hint","","/std/iter/RangeIter.html#item.size_hint"],["std::iter::RangeTo::new","","/std/iter/RangeTo.html#item.new"],["std::iter::RangeTo::iter","","/std/iter/RangeTo.html#item.iter"],["std::iter::RangeTo::len","","/std/iter/RangeTo.html#item.len"],["std::iter::RepeatIterator::next"," Returns the next item, if any.","/std/iter/RepeatIterator.html#item.next"],["std::iter::RepeatIterator::next_back","","/std/iter/RepeatIterator.html#item.next_back"],["std::iter::RepeatIterator::size_hint","","/std/iter/RepeatIterator.html#item.size_hint"],["std::iter::RevIterator::next"," Returns the next item, if any.","/std/iter/RevIterator.html#item.next"],["std::iter::RevIterator::next_back"," Returns the next item from the back, if any.","/std/iter/RevIterator.html#item.next_back"],["std::iter::RevIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/RevIterator.html#item.size_hint"],["std::iter::SkipIterator::next"," Returns the next item, if any.","/std/iter/SkipIterator.html#item.next"],["std::iter::SkipIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/SkipIterator.html#item.size_hint"],["std::iter::SkipWhileIterator::next"," Returns the next item, if any.","/std/iter/SkipWhileIterator.html#item.next"],["std::iter::StepByIterator::next"," Returns the next item, if any.","/std/iter/StepByIterator.html#item.next"],["std::iter::StepByIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/StepByIterator.html#item.size_hint"],["std::iter::TakeIterator::next"," Returns the next item, if any.","/std/iter/TakeIterator.html#item.next"],["std::iter::TakeIterator::size_hint"," Returns the number of remaining elements, if available.","/std/iter/TakeIterator.html#item.size_hint"],["std::iter::TakeWhileIterator::next"," Returns the next item, if any.","/std/iter/TakeWhileIterator.html#item.next"],["std::iter::tests::test_range","","/std/iter/tests.html#item.test_range"],["std::iter::tests::test_map","","/std/iter/tests.html#item.test_map"],["std::iter::tests::test_map_rev","","/std/iter/tests.html#item.test_map_rev"],["std::iter::tests::test_filter","","/std/iter/tests.html#item.test_filter"],["std::iter::tests::test_filter_rev","","/std/iter/tests.html#item.test_filter_rev"],["std::iter::tests::test_filter_map","","/std/iter/tests.html#item.test_filter_map"],["std::iter::tests::test_reduce","","/std/iter/tests.html#item.test_reduce"],["std::iter::tests::test_empty","","/std/iter/tests.html#item.test_empty"],["std::iter::tests::test_all","","/std/iter/tests.html#item.test_all"],["std::iter::tests::test_any","","/std/iter/tests.html#item.test_any"],["std::iter::tests::test_repeat","","/std/iter/tests.html#item.test_repeat"],["std::iter::tests::test_skip","","/std/iter/tests.html#item.test_skip"],["std::iter::tests::test_take","","/std/iter/tests.html#item.test_take"],["std::iter::tests::test_count","","/std/iter/tests.html#item.test_count"],["std::iter::tests::test_last","","/std/iter/tests.html#item.test_last"],["std::iter::tests::test_chain","","/std/iter/tests.html#item.test_chain"],["std::iter::tests::test_chain_rev","","/std/iter/tests.html#item.test_chain_rev"],["std::iter::tests::test_enumerate","","/std/iter/tests.html#item.test_enumerate"],["std::iter::tests::test_foreach","","/std/iter/tests.html#item.test_foreach"],["std::iter::tests::test_inspect","","/std/iter/tests.html#item.test_inspect"],["std::iter::tests::test_to_vector","","/std/iter/tests.html#item.test_to_vector"],["std::iter::tests::test_take_while","","/std/iter/tests.html#item.test_take_while"],["std::iter::tests::test_skip_while","","/std/iter/tests.html#item.test_skip_while"],["std::iter::tests::test_step_by","","/std/iter/tests.html#item.test_step_by"],["std::iter::tests::test_nth","","/std/iter/tests.html#item.test_nth"],["std::iter::tests::test_once","","/std/iter/tests.html#item.test_once"],["std::iter::tests::fill_slice","","/std/iter/tests.html#item.fill_slice"],["std::iter::tests::test_peekable","","/std/iter/tests.html#item.test_peekable"],["std::iter::tests::test_group_by","","/std/iter/tests.html#item.test_group_by"],["std::iter::tests::test_group_by_draining","","/std/iter/tests.html#item.test_group_by_draining"],["std::iter::tests::test_rev","","/std/iter/tests.html#item.test_rev"],["std::iter::tests::test_from_fn","","/std/iter/tests.html#item.test_from_fn"],["std::iter::tests::test_fuse","","/std/iter/tests.html#item.test_fuse"],["std::math::tests","","/std/math/tests.html"],["std::math::abs"," Absolute value of a number","/std/math.html#item.abs"],["std::math::widening_abs"," Absolute value of a number","/std/math.html#item.widening_abs"],["std::math::div_floor"," Calculates the quotient and remainder of integer division","/std/math.html#item.div_floor"],["std::math::E"," Base of the natural logarithm","/std/math.html#item.E"],["std::math::FRAC_1_PI"," 1/π","/std/math.html#item.FRAC_1_PI"],["std::math::FRAC_1_SQRT_2"," 1/sqrt(2)","/std/math.html#item.FRAC_1_SQRT_2"],["std::math::FRAC_2_PI"," 2/π","/std/math.html#item.FRAC_2_PI"],["std::math::FRAC_2_SQRT_PI"," 2/sqrt(π)","/std/math.html#item.FRAC_2_SQRT_PI"],["std::math::FRAC_PI_2"," π/2","/std/math.html#item.FRAC_PI_2"],["std::math::FRAC_PI_3"," π/3","/std/math.html#item.FRAC_PI_3"],["std::math::FRAC_PI_4"," π/4","/std/math.html#item.FRAC_PI_4"],["std::math::FRAC_PI_6"," π/6","/std/math.html#item.FRAC_PI_6"],["std::math::FRAC_PI_8"," π/8","/std/math.html#item.FRAC_PI_8"],["std::math::LN_10"," Natural logarithm of 10","/std/math.html#item.LN_10"],["std::math::LN_2"," Natural logarithm of 2","/std/math.html#item.LN_2"],["std::math::LOG10_2"," Logarithm base 10 of 2","/std/math.html#item.LOG10_2"],["std::math::LOG10_E"," Logarithm base 10 of E","/std/math.html#item.LOG10_E"],["std::math::LOG2_10"," Logarithm base 2 of 10","/std/math.html#item.LOG2_10"],["std::math::LOG2_E"," Logarithm base 2 of E","/std/math.html#item.LOG2_E"],["std::math::PI"," π","/std/math.html#item.PI"],["std::math::SQRT_2"," Square root of 2","/std/math.html#item.SQRT_2"],["std::math::TAU"," 2π (also known as τ)","/std/math.html#item.TAU"],["std::math::tests::test_abs","","/std/math/tests.html#item.test_abs"],["std::math::tests::test_div_floor","","/std/math/tests.html#item.test_div_floor"],["std::math::tests::test_various_math","","/std/math/tests.html#item.test_various_math"],["std::mem::internal","","/std/mem/internal.html"],["std::mem::tests","","/std/mem/tests.html"],["std::mem::new"," Allocates an object on the heap.","/std/mem.html#item.new"],["std::mem::alloc"," Allocates an array of specified size on the heap.","/std/mem.html#item.alloc"],["std::mem::realloc"," Resizes a heap-allocated array.","/std/mem.html#item.realloc"],["std::mem::alloc_zeroed"," Allocates an array of specified size on the heap.","/std/mem.html#item.alloc_zeroed"],["std::mem::size_of"," Memory size of for a given type in bytes.","/std/mem.html#item.size_of"],["std::mem::align_of"," Minimum alignment for given type in bytes.","/std/mem.html#item.align_of"],["std::mem::swap"," Swaps the data in two memory locations.","/std/mem.html#item.swap"],["std::mem::replace"," Replaces a memory at location `a` with value `b`.","/std/mem.html#item.replace"],["std::mem::copy_nonoverlapping"," Copies a region of memory from `src` to `dst`.","/std/mem.html#item.copy_nonoverlapping"],["std::mem::copy"," Copies a region of memory from `src` to `dst`.","/std/mem.html#item.copy"],["std::mem::free"," Frees the memory of a heap-allocated object.","/std/mem.html#item.free"],["std::mem::zeroed"," Zero-initialized object of a given type.","/std/mem.html#item.zeroed"],["std::mem::uninitialized"," Uninitialized object.","/std/mem.html#item.uninitialized"],["std::mem::slice"," Fat pointers to a contiguous region of memory.","/std/mem/slice.html"],["std::mem::SliceIterator"," Iterator over elements of a slice","/std/mem/SliceIterator.html"],["std::mem::SliceRefIterator"," Iterator over pointers to elements of a slice","/std/mem/SliceRefIterator.html"],["std::mem::Freeable"," Types that can be \"freed\".","/std/mem/Freeable.html"],["std::mem::Movable"," Types that implement move semantics","/std/mem/Movable.html"],["std::mem::Copyable"," Types that be copied (usually heap-allocated types)","/std/mem/Copyable.html"],["std::mem::AsSlice"," Types that can be viewed as slices","/std/mem/AsSlice.html"],["std::mem::AsSliceMut"," Types that can be viewed as mutable slices","/std/mem/AsSliceMut.html"],["std::mem::AsSlice::as_slice","","/std/mem/AsSlice.html#item.as_slice"],["std::mem::AsSliceMut::as_slice_mut","","/std/mem/AsSliceMut.html#item.as_slice_mut"],["std::mem::Copyable::clone","","/std/mem/Copyable.html#item.clone"],["std::mem::Freeable::free"," Frees the memory backing the object.","/std/mem/Freeable.html#item.free"],["std::mem::Movable::move"," Creates a copy of the object, leaving an inert object behind.","/std/mem/Movable.html#item.move"],["std::mem::SliceIterator::next"," Returns the next item, if any.","/std/mem/SliceIterator.html#item.next"],["std::mem::SliceIterator::next_back"," Returns the next item from the back, if any.","/std/mem/SliceIterator.html#item.next_back"],["std::mem::SliceIterator::size_hint"," Returns the number of remaining elements, if available.","/std/mem/SliceIterator.html#item.size_hint"],["std::mem::SliceRefIterator::next"," Returns the next item, if any.","/std/mem/SliceRefIterator.html#item.next"],["std::mem::SliceRefIterator::next_back"," Returns the next item from the back, if any.","/std/mem/SliceRefIterator.html#item.next_back"],["std::mem::SliceRefIterator::size_hint"," Returns the number of remaining elements, if available.","/std/mem/SliceRefIterator.html#item.size_hint"],["std::mem::internal::slice_index","","/std/mem/internal.html#item.slice_index"],["std::mem::internal::slice_range_index","","/std/mem/internal.html#item.slice_range_index"],["std::mem::internal::slice_coerce","","/std/mem/internal.html#item.slice_coerce"],["std::mem::slice::empty"," Empty slice","/std/mem/slice.html#item.empty"],["std::mem::slice::from_raw"," Create a slice from a pointer and length","/std/mem/slice.html#item.from_raw"],["std::mem::slice::iter","","/std/mem/slice.html#item.iter"],["std::mem::slice::iter_ref","","/std/mem/slice.html#item.iter_ref"],["std::mem::slice::iter_mut","","/std/mem/slice.html#item.iter_mut"],["std::mem::slice::fill"," Fill slice with a value","/std/mem/slice.html#item.fill"],["std::mem::slice::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/mem/slice.html#item.equals"],["std::mem::slice::compare"," Compare the value","/std/mem/slice.html#item.compare"],["std::mem::slice::hash"," Update hasher state with the contents of this object.","/std/mem/slice.html#item.hash"],["std::mem::slice::fmt"," Write the object into a given formatter.","/std/mem/slice.html#item.fmt"],["std::mem::tests::slice_range_index","","/std/mem/tests.html#item.slice_range_index"],["std::mem::tests::size_of_zst","","/std/mem/tests.html#item.size_of_zst"],["std::mem::tests::align_of_zst","","/std/mem/tests.html#item.align_of_zst"],["std::mem::tests::test_fill","","/std/mem/tests.html#item.test_fill"],["std::net::unix","","/std/net/unix.html"],["std::net::address","","/std/net/address.html"],["std::net::buffered"," Create a buffered reader/writer pair for a socket.","/std/net.html#item.buffered"],["std::net::Ipv6Addr"," IPv6 address","/std/net/Ipv6Addr.html"],["std::net::NameLookup"," Domain name resolution iterator","/std/net/NameLookup.html"],["std::net::Socket"," A network socket","/std/net/Socket.html"],["std::net::Ipv4Addr","","/std/net/Ipv4Addr.html"],["std::net::TcpStream","","/std/net/TcpStream.html"],["std::net::TcpListener","","/std/net/TcpListener.html"],["std::net::IpAddr","","/std/net/IpAddr.html"],["std::net::SocketAddr"," Socket address (e.g. IP address and port)","/std/net/SocketAddr.html"],["std::net::UdpSocket","","/std/net/UdpSocket.html"],["std::net::AddrKind"," Network address family","/std/net/AddrKind.html"],["std::net::Shutdown","","/std/net/Shutdown.html"],["std::net::AddrKind::V6","","/std/net/AddrKind.html#item.V6"],["std::net::AddrKind::V4","","/std/net/AddrKind.html#item.V4"],["std::net::IpAddr::v6","","/std/net/IpAddr.html#item.v6"],["std::net::IpAddr::v4","","/std/net/IpAddr.html#item.v4"],["std::net::IpAddr::fmt","","/std/net/IpAddr.html#item.fmt"],["std::net::IpAddr::equals","","/std/net/IpAddr.html#item.equals"],["std::net::Ipv4Addr::new","","/std/net/Ipv4Addr.html#item.new"],["std::net::Ipv4Addr::localhost","","/std/net/Ipv4Addr.html#item.localhost"],["std::net::Ipv4Addr::unspecified","","/std/net/Ipv4Addr.html#item.unspecified"],["std::net::Ipv4Addr::broadcast","","/std/net/Ipv4Addr.html#item.broadcast"],["std::net::Ipv4Addr::from_libc","","/std/net/Ipv4Addr.html#item.from_libc"],["std::net::Ipv4Addr::to_octets","","/std/net/Ipv4Addr.html#item.to_octets"],["std::net::Ipv4Addr::to_ipv6_compatible","","/std/net/Ipv4Addr.html#item.to_ipv6_compatible"],["std::net::Ipv4Addr::to_ipv6_mapped","","/std/net/Ipv4Addr.html#item.to_ipv6_mapped"],["std::net::Ipv4Addr::parse","","/std/net/Ipv4Addr.html#item.parse"],["std::net::Ipv4Addr::fmt","","/std/net/Ipv4Addr.html#item.fmt"],["std::net::Ipv4Addr::equals","","/std/net/Ipv4Addr.html#item.equals"],["std::net::Ipv6Addr::new"," Create a new IPv6 address from 16-bit segments","/std/net/Ipv6Addr.html#item.new"],["std::net::Ipv6Addr::from_segments"," Create a new IPv6 address from a slice of 16-bit segments","/std/net/Ipv6Addr.html#item.from_segments"],["std::net::Ipv6Addr::localhost"," Localhost address (`::1`)","/std/net/Ipv6Addr.html#item.localhost"],["std::net::Ipv6Addr::unspecified"," Unspecified address (`::`)","/std/net/Ipv6Addr.html#item.unspecified"],["std::net::Ipv6Addr::from_libc"," Convert `in6_addr` into an IPv6 address","/std/net/Ipv6Addr.html#item.from_libc"],["std::net::Ipv6Addr::to_segments","","/std/net/Ipv6Addr.html#item.to_segments"],["std::net::Ipv6Addr::to_ipv4"," Extract IPv4 address from an IPv6 address if it's a v4-mapped or v4-compat address","/std/net/Ipv6Addr.html#item.to_ipv4"],["std::net::Ipv6Addr::parse"," Parses an IPv6 address from a string.","/std/net/Ipv6Addr.html#item.parse"],["std::net::Ipv6Addr::fmt"," Write the object into a given formatter.","/std/net/Ipv6Addr.html#item.fmt"],["std::net::Ipv6Addr::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/net/Ipv6Addr.html#item.equals"],["std::net::NameLookup::resolve"," Resolve a hostname to network addresses","/std/net/NameLookup.html#item.resolve"],["std::net::NameLookup::next"," Returns the next item, if any.","/std/net/NameLookup.html#item.next"],["std::net::NameLookup::free"," Frees the memory backing the object.","/std/net/NameLookup.html#item.free"],["std::net::NameLookup::move"," Creates a copy of the object, leaving an inert object behind.","/std/net/NameLookup.html#item.move"],["std::net::Shutdown::Read","","/std/net/Shutdown.html#item.Read"],["std::net::Shutdown::Write","","/std/net/Shutdown.html#item.Write"],["std::net::Shutdown::Both","","/std/net/Shutdown.html#item.Both"],["std::net::Socket::new","","/std/net/Socket.html#item.new"],["std::net::Socket::as_fd","","/std/net/Socket.html#item.as_fd"],["std::net::Socket::shutdown","","/std/net/Socket.html#item.shutdown"],["std::net::Socket::recv_from_with_flags","","/std/net/Socket.html#item.recv_from_with_flags"],["std::net::Socket::recv_with_flags","","/std/net/Socket.html#item.recv_with_flags"],["std::net::Socket::read","","/std/net/Socket.html#item.read"],["std::net::Socket::peer_addr","","/std/net/Socket.html#item.peer_addr"],["std::net::Socket::socket_addr","","/std/net/Socket.html#item.socket_addr"],["std::net::Socket::close","","/std/net/Socket.html#item.close"],["std::net::Socket::move","","/std/net/Socket.html#item.move"],["std::net::SocketAddr::new","","/std/net/SocketAddr.html#item.new"],["std::net::SocketAddr::with_flowinfo_and_scope","","/std/net/SocketAddr.html#item.with_flowinfo_and_scope"],["std::net::SocketAddr::set_port","","/std/net/SocketAddr.html#item.set_port"],["std::net::SocketAddr::port","","/std/net/SocketAddr.html#item.port"],["std::net::SocketAddr::ip","","/std/net/SocketAddr.html#item.ip"],["std::net::SocketAddr::parse","","/std/net/SocketAddr.html#item.parse"],["std::net::SocketAddr::fmt","","/std/net/SocketAddr.html#item.fmt"],["std::net::SocketAddr::equals","","/std/net/SocketAddr.html#item.equals"],["std::net::TcpListener::from_socket","","/std/net/TcpListener.html#item.from_socket"],["std::net::TcpListener::bind","","/std/net/TcpListener.html#item.bind"],["std::net::TcpListener::as_fd","","/std/net/TcpListener.html#item.as_fd"],["std::net::TcpListener::accept","","/std/net/TcpListener.html#item.accept"],["std::net::TcpListener::socket_addr","","/std/net/TcpListener.html#item.socket_addr"],["std::net::TcpListener::close","","/std/net/TcpListener.html#item.close"],["std::net::TcpListener::move","","/std/net/TcpListener.html#item.move"],["std::net::TcpStream::from_socket","","/std/net/TcpStream.html#item.from_socket"],["std::net::TcpStream::connect","","/std/net/TcpStream.html#item.connect"],["std::net::TcpStream::as_fd","","/std/net/TcpStream.html#item.as_fd"],["std::net::TcpStream::peer_addr","","/std/net/TcpStream.html#item.peer_addr"],["std::net::TcpStream::socket_addr","","/std/net/TcpStream.html#item.socket_addr"],["std::net::TcpStream::shutdown","","/std/net/TcpStream.html#item.shutdown"],["std::net::TcpStream::read","","/std/net/TcpStream.html#item.read"],["std::net::TcpStream::write","","/std/net/TcpStream.html#item.write"],["std::net::TcpStream::flush","","/std/net/TcpStream.html#item.flush"],["std::net::TcpStream::close","","/std/net/TcpStream.html#item.close"],["std::net::TcpStream::move","","/std/net/TcpStream.html#item.move"],["std::net::UdpSocket::from_socket","","/std/net/UdpSocket.html#item.from_socket"],["std::net::UdpSocket::bind","","/std/net/UdpSocket.html#item.bind"],["std::net::UdpSocket::connect","","/std/net/UdpSocket.html#item.connect"],["std::net::UdpSocket::recv_from","","/std/net/UdpSocket.html#item.recv_from"],["std::net::UdpSocket::peek_from","","/std/net/UdpSocket.html#item.peek_from"],["std::net::UdpSocket::send_to","","/std/net/UdpSocket.html#item.send_to"],["std::net::UdpSocket::recv","","/std/net/UdpSocket.html#item.recv"],["std::net::UdpSocket::peek","","/std/net/UdpSocket.html#item.peek"],["std::net::UdpSocket::send","","/std/net/UdpSocket.html#item.send"],["std::net::UdpSocket::as_fd","","/std/net/UdpSocket.html#item.as_fd"],["std::net::UdpSocket::peer_addr","","/std/net/UdpSocket.html#item.peer_addr"],["std::net::UdpSocket::socket_addr","","/std/net/UdpSocket.html#item.socket_addr"],["std::net::UdpSocket::close","","/std/net/UdpSocket.html#item.close"],["std::net::UdpSocket::move","","/std/net/UdpSocket.html#item.move"],["std::net::address::internal","","/std/net/address/internal.html"],["std::net::address::tests","","/std/net/address/tests.html"],["std::net::address::Ipv6Addr"," IPv6 address","/std/net/address/Ipv6Addr.html"],["std::net::address::Ipv4Addr","","/std/net/address/Ipv4Addr.html"],["std::net::address::IpAddr","","/std/net/address/IpAddr.html"],["std::net::address::SocketAddr"," Socket address (e.g. IP address and port)","/std/net/address/SocketAddr.html"],["std::net::address::IpAddrInner","","/std/net/address/IpAddrInner.html"],["std::net::address::SocketAddrInner","","/std/net/address/SocketAddrInner.html"],["std::net::address::AddrKind"," Network address family","/std/net/address/AddrKind.html"],["std::net::address::AddrKind::V6","","/std/net/address/AddrKind.html#item.V6"],["std::net::address::AddrKind::V4","","/std/net/address/AddrKind.html#item.V4"],["std::net::address::IpAddr::v6","","/std/net/address/IpAddr.html#item.v6"],["std::net::address::IpAddr::v4","","/std/net/address/IpAddr.html#item.v4"],["std::net::address::IpAddr::fmt","","/std/net/address/IpAddr.html#item.fmt"],["std::net::address::IpAddr::equals","","/std/net/address/IpAddr.html#item.equals"],["std::net::address::Ipv4Addr::new","","/std/net/address/Ipv4Addr.html#item.new"],["std::net::address::Ipv4Addr::localhost","","/std/net/address/Ipv4Addr.html#item.localhost"],["std::net::address::Ipv4Addr::unspecified","","/std/net/address/Ipv4Addr.html#item.unspecified"],["std::net::address::Ipv4Addr::broadcast","","/std/net/address/Ipv4Addr.html#item.broadcast"],["std::net::address::Ipv4Addr::from_libc","","/std/net/address/Ipv4Addr.html#item.from_libc"],["std::net::address::Ipv4Addr::to_octets","","/std/net/address/Ipv4Addr.html#item.to_octets"],["std::net::address::Ipv4Addr::to_ipv6_compatible","","/std/net/address/Ipv4Addr.html#item.to_ipv6_compatible"],["std::net::address::Ipv4Addr::to_ipv6_mapped","","/std/net/address/Ipv4Addr.html#item.to_ipv6_mapped"],["std::net::address::Ipv4Addr::parse","","/std/net/address/Ipv4Addr.html#item.parse"],["std::net::address::Ipv4Addr::fmt","","/std/net/address/Ipv4Addr.html#item.fmt"],["std::net::address::Ipv4Addr::equals","","/std/net/address/Ipv4Addr.html#item.equals"],["std::net::address::Ipv6Addr::new"," Create a new IPv6 address from 16-bit segments","/std/net/address/Ipv6Addr.html#item.new"],["std::net::address::Ipv6Addr::from_segments"," Create a new IPv6 address from a slice of 16-bit segments","/std/net/address/Ipv6Addr.html#item.from_segments"],["std::net::address::Ipv6Addr::localhost"," Localhost address (`::1`)","/std/net/address/Ipv6Addr.html#item.localhost"],["std::net::address::Ipv6Addr::unspecified"," Unspecified address (`::`)","/std/net/address/Ipv6Addr.html#item.unspecified"],["std::net::address::Ipv6Addr::from_libc"," Convert `in6_addr` into an IPv6 address","/std/net/address/Ipv6Addr.html#item.from_libc"],["std::net::address::Ipv6Addr::to_segments","","/std/net/address/Ipv6Addr.html#item.to_segments"],["std::net::address::Ipv6Addr::to_ipv4"," Extract IPv4 address from an IPv6 address if it's a v4-mapped or v4-compat address","/std/net/address/Ipv6Addr.html#item.to_ipv4"],["std::net::address::Ipv6Addr::parse"," Parses an IPv6 address from a string.","/std/net/address/Ipv6Addr.html#item.parse"],["std::net::address::Ipv6Addr::fmt"," Write the object into a given formatter.","/std/net/address/Ipv6Addr.html#item.fmt"],["std::net::address::Ipv6Addr::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/net/address/Ipv6Addr.html#item.equals"],["std::net::address::SocketAddr::new","","/std/net/address/SocketAddr.html#item.new"],["std::net::address::SocketAddr::with_flowinfo_and_scope","","/std/net/address/SocketAddr.html#item.with_flowinfo_and_scope"],["std::net::address::SocketAddr::set_port","","/std/net/address/SocketAddr.html#item.set_port"],["std::net::address::SocketAddr::port","","/std/net/address/SocketAddr.html#item.port"],["std::net::address::SocketAddr::ip","","/std/net/address/SocketAddr.html#item.ip"],["std::net::address::SocketAddr::parse","","/std/net/address/SocketAddr.html#item.parse"],["std::net::address::SocketAddr::fmt","","/std/net/address/SocketAddr.html#item.fmt"],["std::net::address::SocketAddr::equals","","/std/net/address/SocketAddr.html#item.equals"],["std::net::address::internal::ipv6_parse_part"," Parses A or B for IPv6 addresses in \"A::B\" format","/std/net/address/internal.html#item.ipv6_parse_part"],["std::net::address::internal::htons","","/std/net/address/internal.html#item.htons"],["std::net::address::tests::test_addr","","/std/net/address/tests.html#item.test_addr"],["std::net::address::tests::test_addr_mapped","","/std/net/address/tests.html#item.test_addr_mapped"],["std::net::address::tests::test_ipv4_addr","","/std/net/address/tests.html#item.test_ipv4_addr"],["std::net::address::tests::test_socket_addr","","/std/net/address/tests.html#item.test_socket_addr"],["std::net::address::tests::test_socket_addr_with_scope_id","","/std/net/address/tests.html#item.test_socket_addr_with_scope_id"],["std::net::address::tests::test_ipv4_socket_addr","","/std/net/address/tests.html#item.test_ipv4_socket_addr"],["std::net::address::tests::test_ipv6_parse","","/std/net/address/tests.html#item.test_ipv6_parse"],["std::net::address::tests::test_ipv6_parse_invalid","","/std/net/address/tests.html#item.test_ipv6_parse_invalid"],["std::net::address::tests::test_ipv4_parse","","/std/net/address/tests.html#item.test_ipv4_parse"],["std::net::address::tests::test_sa_parse","","/std/net/address/tests.html#item.test_sa_parse"],["std::net::address::tests::test_sa_parse_invalid","","/std/net/address/tests.html#item.test_sa_parse_invalid"],["std::net::address::tests::fmt","","/std/net/address/tests/fmt.html"],["std::net::address::tests::fmt_ipv6","","/std/net/address/tests/fmt_ipv6.html"],["std::net::address::tests::roundtrip_v6","","/std/net/address/tests/roundtrip_v6.html"],["std::net::address::tests::fail_v6","","/std/net/address/tests/fail_v6.html"],["std::net::address::tests::roundtrip_sa","","/std/net/address/tests/roundtrip_sa.html"],["std::net::address::tests::fail_sa","","/std/net/address/tests/fail_sa.html"],["std::net::address::tests::BUF","","/std/net/address/tests.html#item.BUF"],["std::net::unix::tests","","/std/net/unix/tests.html"],["std::net::unix::sockaddr_to_addr","","/std/net/unix.html#item.sockaddr_to_addr"],["std::net::unix::addr_to_family","","/std/net/unix.html#item.addr_to_family"],["std::net::unix::NameLookup"," Domain name resolution iterator","/std/net/unix/NameLookup.html"],["std::net::unix::Socket"," A network socket","/std/net/unix/Socket.html"],["std::net::unix::TcpStream","","/std/net/unix/TcpStream.html"],["std::net::unix::TcpListener","","/std/net/unix/TcpListener.html"],["std::net::unix::UdpSocket","","/std/net/unix/UdpSocket.html"],["std::net::unix::Shutdown","","/std/net/unix/Shutdown.html"],["std::net::unix::MSG_NOSIGNAL","","/std/net/unix.html#item.MSG_NOSIGNAL"],["std::net::unix::NameLookup::resolve"," Resolve a hostname to network addresses","/std/net/unix/NameLookup.html#item.resolve"],["std::net::unix::NameLookup::next"," Returns the next item, if any.","/std/net/unix/NameLookup.html#item.next"],["std::net::unix::NameLookup::free"," Frees the memory backing the object.","/std/net/unix/NameLookup.html#item.free"],["std::net::unix::NameLookup::move"," Creates a copy of the object, leaving an inert object behind.","/std/net/unix/NameLookup.html#item.move"],["std::net::unix::Shutdown::Read","","/std/net/unix/Shutdown.html#item.Read"],["std::net::unix::Shutdown::Write","","/std/net/unix/Shutdown.html#item.Write"],["std::net::unix::Shutdown::Both","","/std/net/unix/Shutdown.html#item.Both"],["std::net::unix::Socket::new","","/std/net/unix/Socket.html#item.new"],["std::net::unix::Socket::as_fd","","/std/net/unix/Socket.html#item.as_fd"],["std::net::unix::Socket::shutdown","","/std/net/unix/Socket.html#item.shutdown"],["std::net::unix::Socket::recv_from_with_flags","","/std/net/unix/Socket.html#item.recv_from_with_flags"],["std::net::unix::Socket::recv_with_flags","","/std/net/unix/Socket.html#item.recv_with_flags"],["std::net::unix::Socket::read","","/std/net/unix/Socket.html#item.read"],["std::net::unix::Socket::peer_addr","","/std/net/unix/Socket.html#item.peer_addr"],["std::net::unix::Socket::socket_addr","","/std/net/unix/Socket.html#item.socket_addr"],["std::net::unix::Socket::close","","/std/net/unix/Socket.html#item.close"],["std::net::unix::Socket::move","","/std/net/unix/Socket.html#item.move"],["std::net::unix::TcpListener::from_socket","","/std/net/unix/TcpListener.html#item.from_socket"],["std::net::unix::TcpListener::bind","","/std/net/unix/TcpListener.html#item.bind"],["std::net::unix::TcpListener::as_fd","","/std/net/unix/TcpListener.html#item.as_fd"],["std::net::unix::TcpListener::accept","","/std/net/unix/TcpListener.html#item.accept"],["std::net::unix::TcpListener::socket_addr","","/std/net/unix/TcpListener.html#item.socket_addr"],["std::net::unix::TcpListener::close","","/std/net/unix/TcpListener.html#item.close"],["std::net::unix::TcpListener::move","","/std/net/unix/TcpListener.html#item.move"],["std::net::unix::TcpStream::from_socket","","/std/net/unix/TcpStream.html#item.from_socket"],["std::net::unix::TcpStream::connect","","/std/net/unix/TcpStream.html#item.connect"],["std::net::unix::TcpStream::as_fd","","/std/net/unix/TcpStream.html#item.as_fd"],["std::net::unix::TcpStream::peer_addr","","/std/net/unix/TcpStream.html#item.peer_addr"],["std::net::unix::TcpStream::socket_addr","","/std/net/unix/TcpStream.html#item.socket_addr"],["std::net::unix::TcpStream::shutdown","","/std/net/unix/TcpStream.html#item.shutdown"],["std::net::unix::TcpStream::read","","/std/net/unix/TcpStream.html#item.read"],["std::net::unix::TcpStream::write","","/std/net/unix/TcpStream.html#item.write"],["std::net::unix::TcpStream::flush","","/std/net/unix/TcpStream.html#item.flush"],["std::net::unix::TcpStream::close","","/std/net/unix/TcpStream.html#item.close"],["std::net::unix::TcpStream::move","","/std/net/unix/TcpStream.html#item.move"],["std::net::unix::UdpSocket::from_socket","","/std/net/unix/UdpSocket.html#item.from_socket"],["std::net::unix::UdpSocket::bind","","/std/net/unix/UdpSocket.html#item.bind"],["std::net::unix::UdpSocket::connect","","/std/net/unix/UdpSocket.html#item.connect"],["std::net::unix::UdpSocket::recv_from","","/std/net/unix/UdpSocket.html#item.recv_from"],["std::net::unix::UdpSocket::peek_from","","/std/net/unix/UdpSocket.html#item.peek_from"],["std::net::unix::UdpSocket::send_to","","/std/net/unix/UdpSocket.html#item.send_to"],["std::net::unix::UdpSocket::recv","","/std/net/unix/UdpSocket.html#item.recv"],["std::net::unix::UdpSocket::peek","","/std/net/unix/UdpSocket.html#item.peek"],["std::net::unix::UdpSocket::send","","/std/net/unix/UdpSocket.html#item.send"],["std::net::unix::UdpSocket::as_fd","","/std/net/unix/UdpSocket.html#item.as_fd"],["std::net::unix::UdpSocket::peer_addr","","/std/net/unix/UdpSocket.html#item.peer_addr"],["std::net::unix::UdpSocket::socket_addr","","/std/net/unix/UdpSocket.html#item.socket_addr"],["std::net::unix::UdpSocket::close","","/std/net/unix/UdpSocket.html#item.close"],["std::net::unix::UdpSocket::move","","/std/net/unix/UdpSocket.html#item.move"],["std::net::unix::tests::fork","","/std/net/unix/tests.html#item.fork"],["std::net::unix::tests::test_name_resolution","","/std/net/unix/tests.html#item.test_name_resolution"],["std::net::unix::tests::test_basic_tcp","","/std/net/unix/tests.html#item.test_basic_tcp"],["std::net::unix::tests::test_basic_udp","","/std/net/unix/tests.html#item.test_basic_udp"],["std::net::unix::tests::test_udp_connect","","/std/net/unix/tests.html#item.test_udp_connect"],["std::net::unix::tests::test_udp_peek","","/std/net/unix/tests.html#item.test_udp_peek"],["std::option::tests","","/std/option/tests.html"],["std::option::Option"," Optional value","/std/option/Option.html"],["std::option::try"," Extract the value or short-circuit the calling function.","/std/option/try.html"],["std::option::Option::some"," Create a populated `Option` value","/std/option/Option.html#item.some"],["std::option::Option::none"," Create an empty `Option` value","/std/option/Option.html#item.none"],["std::option::Option::as_result"," Convert the option into a [std::result::Result]","/std/option/Option.html#item.as_result"],["std::option::Option::unwrap"," Returns a value, if present, panic otherwise.","/std/option/Option.html#item.unwrap"],["std::option::Option::unwrap_or"," Returns a value, if present, otherwise return a default value.","/std/option/Option.html#item.unwrap_or"],["std::option::Option::unwrap_or_else"," Returns a value, if present, otherwise invoke func to get the default.","/std/option/Option.html#item.unwrap_or_else"],["std::option::Option::map"," Transform the value inside the `Option` by calling the provided function.","/std/option/Option.html#item.map"],["std::option::Option::and_then"," Transform the value inside the `Option` by calling the provided function.","/std/option/Option.html#item.and_then"],["std::option::Option::or"," If `self` is populated, return it, otherwise return `other`","/std/option/Option.html#item.or"],["std::option::Option::iter","","/std/option/Option.html#item.iter"],["std::option::Option::next","","/std/option/Option.html#item.next"],["std::option::Option::move","","/std/option/Option.html#item.move"],["std::option::Option::transpose"," Convert `Option<Result<T, E>>` to `Result<Option<T>, E>`","/std/option/Option.html#item.transpose"],["std::option::Option::equals","","/std/option/Option.html#item.equals"],["std::option::Option::compare","","/std/option/Option.html#item.compare"],["std::option::Option::fmt","","/std/option/Option.html#item.fmt"],["std::option::Option::free","","/std/option/Option.html#item.free"],["std::option::tests::option_ok","","/std/option/tests.html#item.option_ok"],["std::option::tests::option_none","","/std/option/tests.html#item.option_none"],["std::option::tests::option_equals","","/std/option/tests.html#item.option_equals"],["std::option::tests::option_compare","","/std/option/tests.html#item.option_compare"],["std::option::tests::option_fmt","","/std/option/tests.html#item.option_fmt"],["std::option::tests::option_iter","","/std/option/tests.html#item.option_iter"],["std::option::tests::option_as_result","","/std/option/tests.html#item.option_as_result"],["std::option::tests::option_unwrap","","/std/option/tests.html#item.option_unwrap"],["std::option::tests::option_unwrap_none","","/std/option/tests.html#item.option_unwrap_none"],["std::option::tests::option_unwrap_or","","/std/option/tests.html#item.option_unwrap_or"],["std::option::tests::fmt","","/std/option/tests/fmt.html"],["std::option::tests::BUF","","/std/option/tests.html#item.BUF"],["std::panicking::internal","","/std/panicking/internal.html"],["std::panicking::panic"," Ungracefully terminate the process with an error message.","/std/panicking/panic.html"],["std::panicking::internal::backtrace","","/std/panicking/internal.html#item.backtrace"],["std::panicking::internal::backtrace_symbols","","/std/panicking/internal.html#item.backtrace_symbols"],["std::panicking::internal::backtrace_symbols_fd","","/std/panicking/internal.html#item.backtrace_symbols_fd"],["std::panicking::internal::print_panic_message","","/std/panicking/internal.html#item.print_panic_message"],["std::panicking::internal::panic_impl","","/std/panicking/internal.html#item.panic_impl"],["std::panicking::internal::PanicFormatter"," Small formatter with as few dependencies as possible.","/std/panicking/internal/PanicFormatter.html"],["std::panicking::internal::PANICKING","","/std/panicking/internal.html#item.PANICKING"],["std::panicking::internal::PanicFormatter::write_str","","/std/panicking/internal/PanicFormatter.html#item.write_str"],["std::prelude::void"," Unit type (`()`)","/std/prelude/void.html"],["std::prelude::bool"," Boolean type","/std/prelude/bool.html"],["std::prelude::Option"," Optional value","/std/prelude/Option.html"],["std::prelude::Result"," Type for operations that can fail.","/std/prelude/Result.html"],["std::prelude::u8"," 8-bit unsigned integer (byte)","/std/prelude/u8.html"],["std::prelude::u16"," 16-bit unsigned integer","/std/prelude/u16.html"],["std::prelude::u32"," 32-bit unsigned integer","/std/prelude/u32.html"],["std::prelude::u64"," 64-bit unsigned integer","/std/prelude/u64.html"],["std::prelude::u128"," 128-bit unsigned integer","/std/prelude/u128.html"],["std::prelude::usize"," Native unsigned integer (machine word)","/std/prelude/usize.html"],["std::prelude::i8"," Signed 8-bit integer","/std/prelude/i8.html"],["std::prelude::i16"," Signed 16-bit integer","/std/prelude/i16.html"],["std::prelude::i32"," Signed 32-bit integer","/std/prelude/i32.html"],["std::prelude::i64"," Signed 64-bit integer","/std/prelude/i64.html"],["std::prelude::i128"," Signed 128-bit integer","/std/prelude/i128.html"],["std::prelude::isize"," Native signed integer (machine word)","/std/prelude/isize.html"],["std::prelude::f32"," Single precision floating point type","/std/prelude/f32.html"],["std::prelude::f64"," Double precision floating point type","/std/prelude/f64.html"],["std::prelude::try"," Extract the success value or short-circuit the calling function.","/std/prelude/try.html"],["std::prelude::panic"," Ungracefully terminate the process with an error message.","/std/prelude/panic.html"],["std::prelude::print"," Prints a formatted string to standard output.","/std/prelude/print.html"],["std::prelude::println"," Prints a formatted string to standard output with newline.","/std/prelude/println.html"],["std::prelude::eprint"," Prints a formatted string to standard error.","/std/prelude/eprint.html"],["std::prelude::eprintln"," Prints a formatted string to standard error with newline.","/std/prelude/eprintln.html"],["std::prelude::unreachable"," Treats the location as unreachable during program flow.","/std/prelude/unreachable.html"],["std::prelude::dbg"," Print a message to standard error with code location information.","/std/prelude/dbg.html"],["std::prelude::Option::some"," Create a populated `Option` value","/std/prelude/Option.html#item.some"],["std::prelude::Option::none"," Create an empty `Option` value","/std/prelude/Option.html#item.none"],["std::prelude::Option::as_result"," Convert the option into a [std::result::Result]","/std/prelude/Option.html#item.as_result"],["std::prelude::Option::unwrap"," Returns a value, if present, panic otherwise.","/std/prelude/Option.html#item.unwrap"],["std::prelude::Option::unwrap_or"," Returns a value, if present, otherwise return a default value.","/std/prelude/Option.html#item.unwrap_or"],["std::prelude::Option::unwrap_or_else"," Returns a value, if present, otherwise invoke func to get the default.","/std/prelude/Option.html#item.unwrap_or_else"],["std::prelude::Option::map"," Transform the value inside the `Option` by calling the provided function.","/std/prelude/Option.html#item.map"],["std::prelude::Option::and_then"," Transform the value inside the `Option` by calling the provided function.","/std/prelude/Option.html#item.and_then"],["std::prelude::Option::or"," If `self` is populated, return it, otherwise return `other`","/std/prelude/Option.html#item.or"],["std::prelude::Option::iter","","/std/prelude/Option.html#item.iter"],["std::prelude::Option::next","","/std/prelude/Option.html#item.next"],["std::prelude::Option::move","","/std/prelude/Option.html#item.move"],["std::prelude::Option::transpose"," Convert `Option<Result<T, E>>` to `Result<Option<T>, E>`","/std/prelude/Option.html#item.transpose"],["std::prelude::Option::equals","","/std/prelude/Option.html#item.equals"],["std::prelude::Option::compare","","/std/prelude/Option.html#item.compare"],["std::prelude::Option::fmt","","/std/prelude/Option.html#item.fmt"],["std::prelude::Option::free","","/std/prelude/Option.html#item.free"],["std::prelude::Option::Movable"," Types that implement move semantics","/std/prelude/Option/Movable.html"],["std::prelude::Option::Formattable"," Types that can be formatted. This is the standard way to implement custom","/std/prelude/Option/Formattable.html"],["std::prelude::Option::write"," Write a formatted string into a given formatter.","/std/prelude/Option/write.html"],["std::prelude::Option::Formattable::fmt"," Write the object into a given formatter.","/std/prelude/Option/Formattable.html#item.fmt"],["std::prelude::Option::Movable::move"," Creates a copy of the object, leaving an inert object behind.","/std/prelude/Option/Movable.html#item.move"],["std::prelude::Result::ok"," Create a success variant","/std/prelude/Result.html#item.ok"],["std::prelude::Result::err"," Create a error variant","/std/prelude/Result.html#item.err"],["std::prelude::Result::unwrap"," Return the success value, panicking if error value is present","/std/prelude/Result.html#item.unwrap"],["std::prelude::Result::unwrap_or"," Return the success value or a default value","/std/prelude/Result.html#item.unwrap_or"],["std::prelude::Result::unwrap_or_else"," Return the success value or a default value provided by a callback","/std/prelude/Result.html#item.unwrap_or_else"],["std::prelude::Result::unwrap_err"," Return the error value, panicking if success value is present","/std/prelude/Result.html#item.unwrap_err"],["std::prelude::Result::map"," Transform the success value inside the `Result` by calling the provided function.","/std/prelude/Result.html#item.map"],["std::prelude::Result::map_err"," Transform the error value inside the `Result` by calling the provided function.","/std/prelude/Result.html#item.map_err"],["std::prelude::Result::and_then","","/std/prelude/Result.html#item.and_then"],["std::prelude::Result::fmt"," Write the object into a given formatter.","/std/prelude/Result.html#item.fmt"],["std::prelude::Result::hash"," Update hasher state with the contents of this object.","/std/prelude/Result.html#item.hash"],["std::prelude::Result::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/prelude/Result.html#item.equals"],["std::prelude::Result::move"," Creates a copy of the object, leaving an inert object behind.","/std/prelude/Result.html#item.move"],["std::prelude::Result::free"," Frees the memory backing the object.","/std/prelude/Result.html#item.free"],["std::prelude::Result::Hasher"," Hashing algorithms.","/std/prelude/Result/Hasher.html"],["std::prelude::Result::Equatable"," Types that can be compared for equality.","/std/prelude/Result/Equatable.html"],["std::prelude::Result::Freeable"," Types that can be \"freed\".","/std/prelude/Result/Freeable.html"],["std::prelude::Result::Hashable"," Types that can be hashed.","/std/prelude/Result/Hashable.html"],["std::prelude::Result::Formatter"," A sink for string formatting operations","/std/prelude/Result/Formatter.html"],["std::prelude::Result::Movable"," Types that implement move semantics","/std/prelude/Result/Movable.html"],["std::prelude::Result::Formattable"," Types that can be formatted. This is the standard way to implement custom","/std/prelude/Result/Formattable.html"],["std::prelude::Result::write"," Write a formatted string into a given formatter.","/std/prelude/Result/write.html"],["std::prelude::Result::Equatable::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/prelude/Result/Equatable.html#item.equals"],["std::prelude::Result::Equatable::not_equals"," Returns `false` if arguments are equal, `true` otherwise","/std/prelude/Result/Equatable.html#item.not_equals"],["std::prelude::Result::Formattable::fmt"," Write the object into a given formatter.","/std/prelude/Result/Formattable.html#item.fmt"],["std::prelude::Result::Formatter::write_str"," Write a string","/std/prelude/Result/Formatter.html#item.write_str"],["std::prelude::Result::Formatter::write_char"," Write a single character","/std/prelude/Result/Formatter.html#item.write_char"],["std::prelude::Result::Freeable::free"," Frees the memory backing the object.","/std/prelude/Result/Freeable.html#item.free"],["std::prelude::Result::Hashable::hash"," Update hasher state with the contents of this object.","/std/prelude/Result/Hashable.html#item.hash"],["std::prelude::Result::Hasher::new"," Create a new hasher.","/std/prelude/Result/Hasher.html#item.new"],["std::prelude::Result::Hasher::write"," Write a byte slice into a hasher.","/std/prelude/Result/Hasher.html#item.write"],["std::prelude::Result::Hasher::finish"," Finalize the hashing and return the hash value.","/std/prelude/Result/Hasher.html#item.finish"],["std::prelude::Result::Hasher::size_of"," Memory size of for a given type in bytes.","/std/prelude/Result/Hasher.html#item.size_of"],["std::prelude::Result::Movable::move"," Creates a copy of the object, leaving an inert object behind.","/std/prelude/Result/Movable.html#item.move"],["std::prelude::bool::equals","","/std/prelude/bool.html#item.equals"],["std::prelude::bool::compare","","/std/prelude/bool.html#item.compare"],["std::prelude::bool::hash","","/std/prelude/bool.html#item.hash"],["std::prelude::bool::fmt","","/std/prelude/bool.html#item.fmt"],["std::prelude::f32::is_sign_negative","","/std/prelude/f32.html#item.is_sign_negative"],["std::prelude::f32::max_value","","/std/prelude/f32.html#item.max_value"],["std::prelude::f32::min_value","","/std/prelude/f32.html#item.min_value"],["std::prelude::f32::min_positive","","/std/prelude/f32.html#item.min_positive"],["std::prelude::f32::epsilon","","/std/prelude/f32.html#item.epsilon"],["std::prelude::f32::acos","","/std/prelude/f32.html#item.acos"],["std::prelude::f32::asin","","/std/prelude/f32.html#item.asin"],["std::prelude::f32::atan","","/std/prelude/f32.html#item.atan"],["std::prelude::f32::atan2","","/std/prelude/f32.html#item.atan2"],["std::prelude::f32::atanh","","/std/prelude/f32.html#item.atanh"],["std::prelude::f32::cbrt","","/std/prelude/f32.html#item.cbrt"],["std::prelude::f32::ceil","","/std/prelude/f32.html#item.ceil"],["std::prelude::f32::cos","","/std/prelude/f32.html#item.cos"],["std::prelude::f32::cosh","","/std/prelude/f32.html#item.cosh"],["std::prelude::f32::erf","","/std/prelude/f32.html#item.erf"],["std::prelude::f32::erfc","","/std/prelude/f32.html#item.erfc"],["std::prelude::f32::exp","","/std/prelude/f32.html#item.exp"],["std::prelude::f32::floor","","/std/prelude/f32.html#item.floor"],["std::prelude::f32::frexp","","/std/prelude/f32.html#item.frexp"],["std::prelude::f32::ldexp","","/std/prelude/f32.html#item.ldexp"],["std::prelude::f32::log","","/std/prelude/f32.html#item.log"],["std::prelude::f32::log2","","/std/prelude/f32.html#item.log2"],["std::prelude::f32::log10","","/std/prelude/f32.html#item.log10"],["std::prelude::f32::modf","","/std/prelude/f32.html#item.modf"],["std::prelude::f32::pow","","/std/prelude/f32.html#item.pow"],["std::prelude::f32::round","","/std/prelude/f32.html#item.round"],["std::prelude::f32::sin","","/std/prelude/f32.html#item.sin"],["std::prelude::f32::sinh","","/std/prelude/f32.html#item.sinh"],["std::prelude::f32::sqrt","","/std/prelude/f32.html#item.sqrt"],["std::prelude::f32::tan","","/std/prelude/f32.html#item.tan"],["std::prelude::f32::tanh","","/std/prelude/f32.html#item.tanh"],["std::prelude::f32::trunc","","/std/prelude/f32.html#item.trunc"],["std::prelude::f64::is_sign_negative","","/std/prelude/f64.html#item.is_sign_negative"],["std::prelude::f64::max_value","","/std/prelude/f64.html#item.max_value"],["std::prelude::f64::min_value","","/std/prelude/f64.html#item.min_value"],["std::prelude::f64::min_positive","","/std/prelude/f64.html#item.min_positive"],["std::prelude::f64::epsilon","","/std/prelude/f64.html#item.epsilon"],["std::prelude::f64::acos","","/std/prelude/f64.html#item.acos"],["std::prelude::f64::asin","","/std/prelude/f64.html#item.asin"],["std::prelude::f64::atan","","/std/prelude/f64.html#item.atan"],["std::prelude::f64::atan2","","/std/prelude/f64.html#item.atan2"],["std::prelude::f64::atanh","","/std/prelude/f64.html#item.atanh"],["std::prelude::f64::cbrt","","/std/prelude/f64.html#item.cbrt"],["std::prelude::f64::ceil","","/std/prelude/f64.html#item.ceil"],["std::prelude::f64::cos","","/std/prelude/f64.html#item.cos"],["std::prelude::f64::cosh","","/std/prelude/f64.html#item.cosh"],["std::prelude::f64::erf","","/std/prelude/f64.html#item.erf"],["std::prelude::f64::erfc","","/std/prelude/f64.html#item.erfc"],["std::prelude::f64::exp","","/std/prelude/f64.html#item.exp"],["std::prelude::f64::floor","","/std/prelude/f64.html#item.floor"],["std::prelude::f64::frexp","","/std/prelude/f64.html#item.frexp"],["std::prelude::f64::ldexp","","/std/prelude/f64.html#item.ldexp"],["std::prelude::f64::log","","/std/prelude/f64.html#item.log"],["std::prelude::f64::log2","","/std/prelude/f64.html#item.log2"],["std::prelude::f64::log10","","/std/prelude/f64.html#item.log10"],["std::prelude::f64::modf","","/std/prelude/f64.html#item.modf"],["std::prelude::f64::pow","","/std/prelude/f64.html#item.pow"],["std::prelude::f64::round","","/std/prelude/f64.html#item.round"],["std::prelude::f64::sin","","/std/prelude/f64.html#item.sin"],["std::prelude::f64::sinh","","/std/prelude/f64.html#item.sinh"],["std::prelude::f64::sqrt","","/std/prelude/f64.html#item.sqrt"],["std::prelude::f64::tan","","/std/prelude/f64.html#item.tan"],["std::prelude::f64::tanh","","/std/prelude/f64.html#item.tanh"],["std::prelude::f64::trunc","","/std/prelude/f64.html#item.trunc"],["std::prelude::i128::max_value","","/std/prelude/i128.html#item.max_value"],["std::prelude::i128::min_value","","/std/prelude/i128.html#item.min_value"],["std::prelude::i16::max_value","","/std/prelude/i16.html#item.max_value"],["std::prelude::i16::min_value","","/std/prelude/i16.html#item.min_value"],["std::prelude::i32::max_value","","/std/prelude/i32.html#item.max_value"],["std::prelude::i32::min_value","","/std/prelude/i32.html#item.min_value"],["std::prelude::i64::max_value","","/std/prelude/i64.html#item.max_value"],["std::prelude::i64::min_value","","/std/prelude/i64.html#item.min_value"],["std::prelude::i8::max_value","","/std/prelude/i8.html#item.max_value"],["std::prelude::i8::min_value","","/std/prelude/i8.html#item.min_value"],["std::prelude::isize::max_value","","/std/prelude/isize.html#item.max_value"],["std::prelude::isize::min_value","","/std/prelude/isize.html#item.min_value"],["std::prelude::u128::max_value","","/std/prelude/u128.html#item.max_value"],["std::prelude::u128::min_value","","/std/prelude/u128.html#item.min_value"],["std::prelude::u16::max_value","","/std/prelude/u16.html#item.max_value"],["std::prelude::u16::min_value","","/std/prelude/u16.html#item.min_value"],["std::prelude::u32::max_value","","/std/prelude/u32.html#item.max_value"],["std::prelude::u32::min_value","","/std/prelude/u32.html#item.min_value"],["std::prelude::u64::max_value","","/std/prelude/u64.html#item.max_value"],["std::prelude::u64::min_value","","/std/prelude/u64.html#item.min_value"],["std::prelude::u8::max_value","","/std/prelude/u8.html#item.max_value"],["std::prelude::u8::min_value","","/std/prelude/u8.html#item.min_value"],["std::prelude::usize::max_value","","/std/prelude/usize.html#item.max_value"],["std::prelude::usize::min_value","","/std/prelude/usize.html#item.min_value"],["std::prelude::void::equals","","/std/prelude/void.html#item.equals"],["std::prelude::void::compare","","/std/prelude/void.html#item.compare"],["std::prelude::void::hash","","/std/prelude/void.html#item.hash"],["std::process::unix","","/std/process/unix.html"],["std::process::exit"," Exits the process with a given return code.","/std/process.html#item.exit"],["std::process::env"," Return environment variables of the current process.","/std/process.html#item.env"],["std::process::EnvIterator"," Iterator over the environment variables.","/std/process/EnvIterator.html"],["std::process::Output","","/std/process/Output.html"],["std::process::Child"," Child process","/std/process/Child.html"],["std::process::Forked"," Builder for creating a forked process.","/std/process/Forked.html"],["std::process::Command"," Builder for creating a process.","/std/process/Command.html"],["std::process::Stdio","","/std/process/Stdio.html"],["std::process::Child::from_pid"," Construct `Child` from a given process id.","/std/process/Child.html#item.from_pid"],["std::process::Child::wait_with_output"," Wait for child to exit, reading stdout and stderr if I/O redirection is requested.","/std/process/Child.html#item.wait_with_output"],["std::process::Child::wait"," Wait for child to exit, returning the exit status.","/std/process/Child.html#item.wait"],["std::process::Child::kill"," Kill the child process.","/std/process/Child.html#item.kill"],["std::process::Child::close"," Close all pipes.","/std/process/Child.html#item.close"],["std::process::Command::new","","/std/process/Command.html#item.new"],["std::process::Command::args"," Set command line arguments.","/std/process/Command.html#item.args"],["std::process::Command::env"," Set environment variables.","/std/process/Command.html#item.env"],["std::process::Command::stdin"," Set the stdin redirection type","/std/process/Command.html#item.stdin"],["std::process::Command::stdout"," Set the stdout redirection type","/std/process/Command.html#item.stdout"],["std::process::Command::stderr"," Set the stderr redirection type","/std/process/Command.html#item.stderr"],["std::process::Command::_after_fork","","/std/process/Command.html#item._after_fork"],["std::process::Command::spawn"," Spawn a process.","/std/process/Command.html#item.spawn"],["std::process::EnvIterator::next"," Returns the next item, if any.","/std/process/EnvIterator.html#item.next"],["std::process::Forked::new","","/std/process/Forked.html#item.new"],["std::process::Forked::stdin"," Set the stdin redirection type","/std/process/Forked.html#item.stdin"],["std::process::Forked::stdout"," Set the stdout redirection type","/std/process/Forked.html#item.stdout"],["std::process::Forked::stderr"," Set the stderr redirection type","/std/process/Forked.html#item.stderr"],["std::process::Forked::_after_fork","","/std/process/Forked.html#item._after_fork"],["std::process::Forked::spawn"," Fork the process.","/std/process/Forked.html#item.spawn"],["std::process::Output::move","","/std/process/Output.html#item.move"],["std::process::Output::free","","/std/process/Output.html#item.free"],["std::process::Stdio::Piped","","/std/process/Stdio.html#item.Piped"],["std::process::Stdio::Null","","/std/process/Stdio.html#item.Null"],["std::process::Stdio::Inherit","","/std/process/Stdio.html#item.Inherit"],["std::process::unix::internal","","/std/process/unix/internal.html"],["std::process::unix::tests","","/std/process/unix/tests.html"],["std::process::unix::env"," Return environment variables of the current process.","/std/process/unix.html#item.env"],["std::process::unix::EnvIterator"," Iterator over the environment variables.","/std/process/unix/EnvIterator.html"],["std::process::unix::Output","","/std/process/unix/Output.html"],["std::process::unix::Child"," Child process","/std/process/unix/Child.html"],["std::process::unix::Forked"," Builder for creating a forked process.","/std/process/unix/Forked.html"],["std::process::unix::Command"," Builder for creating a process.","/std/process/unix/Command.html"],["std::process::unix::Child::from_pid"," Construct `Child` from a given process id.","/std/process/unix/Child.html#item.from_pid"],["std::process::unix::Child::wait_with_output"," Wait for child to exit, reading stdout and stderr if I/O redirection is requested.","/std/process/unix/Child.html#item.wait_with_output"],["std::process::unix::Child::wait"," Wait for child to exit, returning the exit status.","/std/process/unix/Child.html#item.wait"],["std::process::unix::Child::kill"," Kill the child process.","/std/process/unix/Child.html#item.kill"],["std::process::unix::Child::close"," Close all pipes.","/std/process/unix/Child.html#item.close"],["std::process::unix::Command::new","","/std/process/unix/Command.html#item.new"],["std::process::unix::Command::args"," Set command line arguments.","/std/process/unix/Command.html#item.args"],["std::process::unix::Command::env"," Set environment variables.","/std/process/unix/Command.html#item.env"],["std::process::unix::Command::stdin"," Set the stdin redirection type","/std/process/unix/Command.html#item.stdin"],["std::process::unix::Command::stdout"," Set the stdout redirection type","/std/process/unix/Command.html#item.stdout"],["std::process::unix::Command::stderr"," Set the stderr redirection type","/std/process/unix/Command.html#item.stderr"],["std::process::unix::Command::_after_fork","","/std/process/unix/Command.html#item._after_fork"],["std::process::unix::Command::spawn"," Spawn a process.","/std/process/unix/Command.html#item.spawn"],["std::process::unix::EnvIterator::next"," Returns the next item, if any.","/std/process/unix/EnvIterator.html#item.next"],["std::process::unix::Forked::new","","/std/process/unix/Forked.html#item.new"],["std::process::unix::Forked::stdin"," Set the stdin redirection type","/std/process/unix/Forked.html#item.stdin"],["std::process::unix::Forked::stdout"," Set the stdout redirection type","/std/process/unix/Forked.html#item.stdout"],["std::process::unix::Forked::stderr"," Set the stderr redirection type","/std/process/unix/Forked.html#item.stderr"],["std::process::unix::Forked::_after_fork","","/std/process/unix/Forked.html#item._after_fork"],["std::process::unix::Forked::spawn"," Fork the process.","/std/process/unix/Forked.html#item.spawn"],["std::process::unix::Output::move","","/std/process/unix/Output.html#item.move"],["std::process::unix::Output::free","","/std/process/unix/Output.html#item.free"],["std::process::unix::internal::maybe_read_to_end","","/std/process/unix/internal.html#item.maybe_read_to_end"],["std::process::unix::internal::read_to_end_2"," Reads two pipes (or any other stream) into respecitve buffers at the same time.","/std/process/unix/internal.html#item.read_to_end_2"],["std::process::unix::internal::IoRedirection","","/std/process/unix/internal/IoRedirection.html"],["std::process::unix::internal::environ","","/std/process/unix/internal.html#item.environ"],["std::process::unix::internal::IoRedirection::new","","/std/process/unix/internal/IoRedirection.html#item.new"],["std::process::unix::internal::IoRedirection::close","","/std/process/unix/internal/IoRedirection.html#item.close"],["std::process::unix::internal::IoRedirection::install","","/std/process/unix/internal/IoRedirection.html#item.install"],["std::process::unix::internal::IoRedirection::into_inner","","/std/process/unix/internal/IoRedirection.html#item.into_inner"],["std::process::unix::tests::test_spawn","","/std/process/unix/tests.html#item.test_spawn"],["std::process::unix::tests::spawn_fails_on_exec_failure","","/std/process/unix/tests.html#item.spawn_fails_on_exec_failure"],["std::process::unix::tests::test_kill","","/std/process/unix/tests.html#item.test_kill"],["std::process::unix::tests::test_fork","","/std/process/unix/tests.html#item.test_fork"],["std::process::unix::tests::test_fork_starvation","","/std/process/unix/tests.html#item.test_fork_starvation"],["std::random::internal","","/std/random/internal.html"],["std::random::tests","","/std/random/tests.html"],["std::random::next_integer"," Generate a random integer of any unsigned integer type","/std/random.html#item.next_integer"],["std::random::uniform"," Generate a random integer between 0 (inclusive) and `upper_bound` (exclusive)","/std/random.html#item.uniform"],["std::random::next_float"," Generate a random floating point number in [0, 1) interval","/std/random.html#item.next_float"],["std::random::range"," Generate a random number between `lower` (inclusive) and `upper` (exclusive)","/std/random.html#item.range"],["std::random::range_inclusive"," Generate a random number between `lower` and `upper` inclusive","/std/random.html#item.range_inclusive"],["std::random::shuffle"," Permute a slice of elements in random order.","/std/random.html#item.shuffle"],["std::random::choice"," Return a random element of the slice.","/std/random.html#item.choice"],["std::random::Pcg32"," PCG-32 random number generator","/std/random/Pcg32.html"],["std::random::OsRng"," RNG backed by a OS-provided random number generation facility","/std/random/OsRng.html"],["std::random::RandomNumberGenerator"," Random number generators","/std/random/RandomNumberGenerator.html"],["std::random::DEFAULT_RNG"," A convenience pre-seeded random number generator. It is","/std/random.html#item.DEFAULT_RNG"],["std::random::OsRng::new"," Create a new instance of OsRng","/std/random/OsRng.html#item.new"],["std::random::OsRng::new"," Create a new instance of OsRng","/std/random/OsRng.html#item.new.1"],["std::random::OsRng::next_u32"," Generate a 32-bit integer.","/std/random/OsRng.html#item.next_u32"],["std::random::OsRng::next_u64"," Generate a 64-bit integer.","/std/random/OsRng.html#item.next_u64"],["std::random::OsRng::fill_bytes"," Fill the slice with random bytes.","/std/random/OsRng.html#item.fill_bytes"],["std::random::OsRng::close"," Close the file descriptor","/std/random/OsRng.html#item.close"],["std::random::Pcg32::step","","/std/random/Pcg32.html#item.step"],["std::random::Pcg32::from_seed"," Create a Pcg32 random number generator from a given seed.","/std/random/Pcg32.html#item.from_seed"],["std::random::Pcg32::next_u32"," Generate a 32-bit integer.","/std/random/Pcg32.html#item.next_u32"],["std::random::Pcg32::next_u64"," Generate a 64-bit integer.","/std/random/Pcg32.html#item.next_u64"],["std::random::RandomNumberGenerator::next_u32"," Generate a 32-bit integer.","/std/random/RandomNumberGenerator.html#item.next_u32"],["std::random::RandomNumberGenerator::next_u64"," Generate a 64-bit integer.","/std/random/RandomNumberGenerator.html#item.next_u64"],["std::random::RandomNumberGenerator::fill_bytes"," Fill the slice with random bytes.","/std/random/RandomNumberGenerator.html#item.fill_bytes"],["std::random::internal::seed_default_rng","","/std/random/internal.html#item.seed_default_rng"],["std::random::tests::test_float","","/std/random/tests.html#item.test_float"],["std::random::tests::test_range","","/std/random/tests.html#item.test_range"],["std::random::tests::test_range_inclusive","","/std/random/tests.html#item.test_range_inclusive"],["std::random::tests::test_shuffle","","/std/random/tests.html#item.test_shuffle"],["std::random::tests::SEED","","/std/random/tests.html#item.SEED"],["std::result::Result"," Type for operations that can fail.","/std/result/Result.html"],["std::result::ResultT","","/std/result/ResultT.html"],["std::result::try"," Extract the success value or short-circuit the calling function.","/std/result/try.html"],["std::result::Result::ok"," Create a success variant","/std/result/Result.html#item.ok"],["std::result::Result::err"," Create a error variant","/std/result/Result.html#item.err"],["std::result::Result::unwrap"," Return the success value, panicking if error value is present","/std/result/Result.html#item.unwrap"],["std::result::Result::unwrap_or"," Return the success value or a default value","/std/result/Result.html#item.unwrap_or"],["std::result::Result::unwrap_or_else"," Return the success value or a default value provided by a callback","/std/result/Result.html#item.unwrap_or_else"],["std::result::Result::unwrap_err"," Return the error value, panicking if success value is present","/std/result/Result.html#item.unwrap_err"],["std::result::Result::map"," Transform the success value inside the `Result` by calling the provided function.","/std/result/Result.html#item.map"],["std::result::Result::map_err"," Transform the error value inside the `Result` by calling the provided function.","/std/result/Result.html#item.map_err"],["std::result::Result::and_then","","/std/result/Result.html#item.and_then"],["std::result::Result::fmt"," Write the object into a given formatter.","/std/result/Result.html#item.fmt"],["std::result::Result::hash"," Update hasher state with the contents of this object.","/std/result/Result.html#item.hash"],["std::result::Result::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/result/Result.html#item.equals"],["std::result::Result::move"," Creates a copy of the object, leaving an inert object behind.","/std/result/Result.html#item.move"],["std::result::Result::free"," Frees the memory backing the object.","/std/result/Result.html#item.free"],["std::rtti::tests","","/std/rtti/tests.html"],["std::rtti::type_id"," Returns a unique identifer for the type passed as the generic parameter.","/std/rtti.html#item.type_id"],["std::rtti::type_name","","/std/rtti.html#item.type_name"],["std::rtti::TypeId","","/std/rtti.html#item.TypeId"],["std::rtti::tests::test_type_name","","/std/rtti/tests.html#item.test_type_name"],["std::runtime::internal","","/std/runtime/internal.html"],["std::runtime::internal::test_cases"," Minimal support for testing in the compiler.","/std/runtime/internal.html#item.test_cases"],["std::runtime::internal::main"," Program entrypoint glue.","/std/runtime/internal.html#item.main"],["std::runtime::internal::TestCaseMeta","","/std/runtime/internal/TestCaseMeta.html"],["std::runtime::internal::argc_argv_to_slice","","/std/runtime/internal/argc_argv_to_slice.html"],["std::runtime::internal::TEST_CASES","","/std/runtime/internal.html#item.TEST_CASES"],["std::runtime::internal::TestCaseMeta::new","","/std/runtime/internal/TestCaseMeta.html#item.new"],["std::string::tests","","/std/string/tests.html"],["std::string::is_whitespace"," Returns `true` if character is an ASCII whitespace character, `false` otherwise.","/std/string.html#item.is_whitespace"],["std::string::to_lower"," Convert character to lower case.","/std/string.html#item.to_lower"],["std::string::to_upper"," Convert character to upper case.","/std/string.html#item.to_upper"],["std::string::starts_with"," Returns `true` if string starts with the given prefix, `false` otherwise.","/std/string.html#item.starts_with"],["std::string::ends_with"," Returns `true` if string ends with the given suffix, `false` otherwise.","/std/string.html#item.ends_with"],["std::string::trim_prefix"," Return string without the given prefix.","/std/string.html#item.trim_prefix"],["std::string::trim_suffix"," Return string without the given suffix.","/std/string.html#item.trim_suffix"],["std::string::find"," Finds a substring in a string.","/std/string.html#item.find"],["std::string::find_char"," Finds the first occurrence of a character in a string.","/std/string.html#item.find_char"],["std::string::contains"," Returns `true` if `needle` is a substring of self, `false` otherwise.","/std/string.html#item.contains"],["std::string::trim_start"," Trims the whitespace from the start of the string.","/std/string.html#item.trim_start"],["std::string::trim_end"," Trims the whitespace from the end of the string.","/std/string.html#item.trim_end"],["std::string::trim"," Trims the whitespace from the start and end of the string.","/std/string.html#item.trim"],["std::string::split"," Returns an iterator over the parts of the string split by the given delimiter.","/std/string.html#item.split"],["std::string::replace"," Replaces all occurrences of `needle` with `replacement`, returning a new string.","/std/string.html#item.replace"],["std::string::replace_fmt"," Returns an object that formats to the string with all `needle` occurrences replaced with","/std/string.html#item.replace_fmt"],["std::string::join"," Join the parts of a string with the given delimiter, returning a new string.","/std/string.html#item.join"],["std::string::join_fmt"," Returns an object that formats to parts joined with the separartor.","/std/string.html#item.join_fmt"],["std::string::parse_integer"," Parses an integer with the given radix.","/std/string.html#item.parse_integer"],["std::string::SplitIterator"," Iterator over parts of a string split by a delimiter.","/std/string/SplitIterator.html"],["std::string::ReplaceAdapter","","/std/string/ReplaceAdapter.html"],["std::string::JoinAdapter","","/std/string/JoinAdapter.html"],["std::string::StringBuf"," A heap-allocated string.","/std/string.html#item.StringBuf"],["std::string::RADIX_DIGITS","","/std/string.html#item.RADIX_DIGITS"],["std::string::JoinAdapter::fmt","","/std/string/JoinAdapter.html#item.fmt"],["std::string::ReplaceAdapter::fmt","","/std/string/ReplaceAdapter.html#item.fmt"],["std::string::SplitIterator::new","","/std/string/SplitIterator.html#item.new"],["std::string::SplitIterator::next"," Returns the next item, if any.","/std/string/SplitIterator.html#item.next"],["std::string::tests::starts_with_positive","","/std/string/tests.html#item.starts_with_positive"],["std::string::tests::starts_with_negative","","/std/string/tests.html#item.starts_with_negative"],["std::string::tests::find_positive","","/std/string/tests.html#item.find_positive"],["std::string::tests::find_negative","","/std/string/tests.html#item.find_negative"],["std::string::tests::test_parse_integer","","/std/string/tests.html#item.test_parse_integer"],["std::string::tests::test_parse_integer_radix","","/std/string/tests.html#item.test_parse_integer_radix"],["std::string::tests::test_trim_start","","/std/string/tests.html#item.test_trim_start"],["std::string::tests::test_trim_end","","/std/string/tests.html#item.test_trim_end"],["std::string::tests::test_trim","","/std/string/tests.html#item.test_trim"],["std::string::tests::test_split","","/std/string/tests.html#item.test_split"],["std::string::tests::test_join","","/std/string/tests.html#item.test_join"],["std::string::tests::test_replace","","/std/string/tests.html#item.test_replace"],["std::time::internal"," Darwin-specific implementation.","/std/time/internal.html"],["std::time::tests","","/std/time/tests.html"],["std::time::sleep"," Suspends thread execution for the specified duration.","/std/time.html#item.sleep"],["std::time::Instant"," A specific point in time","/std/time/Instant.html"],["std::time::Duration"," Represents a span of time.","/std/time/Duration.html"],["std::time::NANOS_PER_SEC","","/std/time.html#item.NANOS_PER_SEC"],["std::time::NANOS_PER_MILLI","","/std/time.html#item.NANOS_PER_MILLI"],["std::time::NANOS_PER_MICRO","","/std/time.html#item.NANOS_PER_MICRO"],["std::time::MILLIS_PER_SEC","","/std/time.html#item.MILLIS_PER_SEC"],["std::time::MICROS_PER_SEC","","/std/time.html#item.MICROS_PER_SEC"],["std::time::Duration::new","","/std/time/Duration.html#item.new"],["std::time::Duration::zero"," A duration of zero time","/std/time/Duration.html#item.zero"],["std::time::Duration::negative"," Returns `true` if durationis negative, `false` otherwise","/std/time/Duration.html#item.negative"],["std::time::Duration::from_secs"," Duration from a specified number of seconds","/std/time/Duration.html#item.from_secs"],["std::time::Duration::from_millis"," Duration from a specified number of milliseconds","/std/time/Duration.html#item.from_millis"],["std::time::Duration::from_micros"," Duration from a specified number of microseconds","/std/time/Duration.html#item.from_micros"],["std::time::Duration::from_nanos"," Duration from a specified number of nanoseconds","/std/time/Duration.html#item.from_nanos"],["std::time::Duration::add"," Add a duration to another.","/std/time/Duration.html#item.add"],["std::time::Duration::sub"," Subtract a duration from the current duration.","/std/time/Duration.html#item.sub"],["std::time::Duration::total_secs"," Total number of seconds as a floating point.","/std/time/Duration.html#item.total_secs"],["std::time::Duration::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/time/Duration.html#item.equals"],["std::time::Duration::compare"," Compare the value","/std/time/Duration.html#item.compare"],["std::time::Duration::fmt"," Write the object into a given formatter.","/std/time/Duration.html#item.fmt"],["std::time::Instant::now"," Current time","/std/time/Instant.html#item.now"],["std::time::Instant::duration_since"," Returns time elapsed since an earlier instant.","/std/time/Instant.html#item.duration_since"],["std::time::Instant::add"," Add a specific duration to an instant.","/std/time/Instant.html#item.add"],["std::time::Instant::sub"," Subtract a specific duration from an instant.","/std/time/Instant.html#item.sub"],["std::time::Instant::equals"," Returns `true` if arguments are equal, `false` otherwise","/std/time/Instant.html#item.equals"],["std::time::Instant::compare"," Compare the value","/std/time/Instant.html#item.compare"],["std::time::internal::mach_absolute_time","","/std/time/internal.html#item.mach_absolute_time"],["std::time::internal::mach_timebase_info","","/std/time/internal.html#item.mach_timebase_info"],["std::time::internal::mach_timebase_info_t","","/std/time/internal/mach_timebase_info_t.html"],["std::time::internal::TIMEBASE","","/std/time/internal.html#item.TIMEBASE"],["std::time::tests::test_monotonish","","/std/time/tests.html#item.test_monotonish"],["std::time::tests::test_from","","/std/time/tests.html#item.test_from"],["std::time::tests::test_from_negative","","/std/time/tests.html#item.test_from_negative"],["std::time::tests::test_artithmetic","","/std/time/tests.html#item.test_artithmetic"],["std::time::tests::test_fmt","","/std/time/tests.html#item.test_fmt"],["std::time::tests::BUF","","/std/time/tests.html#item.BUF"],["std::util::identity","","/std/util.html#item.identity"],["std::util::discard","","/std/util.html#item.discard"],["std::util::cast","","/std/util.html#item.cast"],["std::util::transmute","","/std/util.html#item.transmute"],["std::util::deref","","/std/util.html#item.deref"],["test::should_fail"," Whether a failure (non-0 exit code) is expected for this test.","/test.html#item.should_fail"],["test::ignored"," Whether a test should be ignored.","/test.html#item.ignored"],["test::run"," Run a single test case in a forked process and collect output.","/test.html#item.run"],["test::print_help_string","","/test.html#item.print_help_string"],["test::parse_args"," Parse command line arguments.","/test.html#item.parse_args"],["test::filter_tests"," Filter tests based on user-provided criteria (e.g. path prefix).","/test.html#item.filter_tests"],["test::main","","/test.html#item.main"],["test::regular_test"," Quis testabitur ipsos testes","/test.html#item.regular_test"],["test::ignored_test","","/test.html#item.ignored_test"],["test::should_fail_test","","/test.html#item.should_fail_test"],["test::TestResult"," Holder for the results of a test case.","/test/TestResult.html"],["test::Args","","/test/Args.html"],["test::State","","/test/State.html"],["test::Args::default","","/test/Args.html#item.default"],["test::State::Normal","","/test/State.html#item.Normal"],["test::State::Prefix","","/test/State.html#item.Prefix"],["test::State::Filter","","/test/State.html#item.Filter"],["test::TestResult::free","","/test/TestResult.html#item.free"],];
if (typeof window.loadSearchIndex !== "undefined") { window.loadSearchIndex(index); }
