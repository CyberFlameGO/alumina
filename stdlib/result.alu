macro try(res) {
    let res = res;
    if res.is_ok {
        res.inner.ok
    } else {
        return Result::err(res.inner.err)
    }
}

macro try_option(opt) {
    let opt = opt;
    if opt.is_some {
        opt.inner
    } else {
        return Option::none()
    }
}

use std::fmt::{write, Formatter};

struct Result<T, E> {
    is_ok: bool,
    inner: ResultT<T, E>
}

impl Result<T, E> {
    #[force_inline]
    fn ok(ok: T) -> Result<T, E> {
        Result::<T, E> {
            is_ok: true, 
            inner: ResultT::<T, E> {
                ok: ok
            }
        }
    }

    #[force_inline]
    fn err(err: E) -> Result<T, E> {
        Result::<T, E> {
            is_ok: false, 
            inner: ResultT::<T, E> {
                err: err
            }
        }
    }

    fn unwrap(self: Result<T, E>) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            panic!("unwrap on an err value")
        }
    }

    fn unwrap_err(self: Result<T, E>) -> E {
        if !self.is_ok {
            self.inner.err
        } else {
            panic!("unwrap_err on an ok value")
        }
    }

    fn map<Tm>(self: Result<T, E>, func: fn(T) -> Tm) -> Result<Tm, E> {
        if self.is_ok {
            Result::ok(func(self.inner.ok))
        } else {
            Result::err(self.inner.err)
        }
    }

    fn map_err<Em>(self: Result<T, E>, func: fn(E) -> Em) -> Result<T, Em> {
        if self.is_ok {
            Result::ok(self.inner.ok)
        } else {
            Result::err(func(self.inner.err))
        }
    }

    fn fmt<F: Formatter<F>>(self: &Result<T, E>, formatter: &mut F) {
        if self.is_ok {
            write!(formatter, "ok({})", self.inner.ok)
        } else {
            write!(formatter, "err({})", self.inner.err)
        }
    }
}

union ResultT<T, E> {
    ok: T,
    err: E
}

struct Option<T> {
    is_some: bool,
    inner: T
}

impl Option<T> {
    #[force_inline]
    fn some(inner: T) -> Option<T> {
        Option::<T> {
            is_some: true, 
            inner: inner
        }
    }

    #[force_inline]
    fn none() -> Option<T> {
        Option::<T> {
            is_some: false
        }
    }

    fn as_result<E>(self: Option<T>, err: E) -> Result<T, E> {
        if self.is_some {
            Result::ok(self.inner)
        } else {
            Result::err(err)
        }
    }

    fn unwrap(self: Option<T>) -> T {
        if self.is_some {
            self.inner
        } else {
            panic!("unwrap on a none value")
        }
    }

    fn fmt<F: Formatter<F>>(self: &Option<T>, formatter: &mut F) {
        if self.is_some {
            write!(formatter, "some({})", self.inner)
        } else {
            write!(formatter, "none")
        }
    }
}
